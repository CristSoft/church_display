// church_display/src\css\proyector.css
@font-face {
  font-family: 'RobotoSlab-Bold';
  src: url('/src/assets/fonts/RobotoSlab-Bold.ttf') format('truetype');
}

@font-face {
  font-family: 'Qwigley';
  src: url('/src/assets/fonts/Handlee-Regular.ttf') format('truetype');
}

body, html { margin: 0; padding: 0; overflow: hidden; font-family: sans-serif; color: white; }
#video-bg {
  position: fixed;
  right: 0;
  bottom: 0;
  min-width: 100%;
  min-height: 100%;
  z-index: -1;
  object-fit: cover;
  width: 100vw;
  height: 100vh;
}
#contenido { 
  display: flex; 
  flex-direction: column; 
  justify-content: center; 
  align-items: center; 
  text-align: center; 
  height: 100vh; 
  background-color: rgba(0, 0, 0, 0.4); /* Sombra para legibilidad */ 
  text-shadow: 2px 2px 8px black; 
  position: relative;
}

/* Contador de sección (arriba a la derecha) */
#contador-seccion {
  position: absolute;
  top: 20px;
  right: 20px;
  font-size: 2.5vw;
  font-weight: bold;
  opacity: 0;
  transition: opacity 0.3s ease-in-out;
}

#contador-seccion.visible {
  opacity: 1;
}

/* Indicador de estrofa (centrado arriba) */
#indicador-estrofa {
  position: relative;
  top: unset;
  left: unset;
  transform: none;
  font-size: 3.5vw; /* Reducido de 5vw a 3.5vw para modo himno */
  font-weight: bold;
  opacity: 0;
  transition: opacity 0.3s ease-in-out;
  margin-bottom: 0.5em;
  margin-top: 0.2em;
}

#indicador-estrofa.visible {
  opacity: 1;
}

#texto-principal { 
  font-size: 5vw;
  padding: 0 2em; 
  transition: opacity 0.3s ease-in-out;
  opacity: 1;
}

/* Regla para permitir override de estilos inline */
#texto-principal.override-font-size {
  font-size: var(--override-font-size) !important;
}

#referencia.override-font-size {
  font-size: var(--override-ref-font-size) !important;
}

#texto-principal.fade-out {
  opacity: 0;
}

/* Estilo especial para título de himno */
#texto-principal.titulo-himno {
  font-family: 'RobotoSlab-Bold', serif;
  font-size: 6vw;
}

#referencia {
  position: absolute;
  top: 20px;
  left: 20px;
  font-size: 1.8vw;
  font-weight: normal;
  opacity: 1;
  transition: opacity 0.3s ease-in-out;
  text-align: left;
  bottom: unset;
}



#referencia.fade-out {
  opacity: 0;
}

#texto-principal.versiculo-biblia {
  font-family: 'Qwigley', cursive;
  font-weight: bold;
}

/* ===== CONFIGURACIONES ESPECÍFICAS POR MODO ===== */

/* Modo Versículo: Referencia arriba, centrada, con fondo de cápsula y semitransparente */
#contenido.modo-versiculo #referencia {
  position: absolute;
  top: 0;
  left: 50%;
  bottom: unset;
  transform: translateX(-50%);
  font-size: 2.5vw !important; /* Mantener !important para CSS, pero los estilos inline tendrán prioridad */
  text-align: center;
  font-weight: bold;
  background: rgba(0,0,0,0.7);
  color: #fff;
  padding: 0.2em 2.0em 0.2em 2.0em; /* más padding abajo para compensar el corte arriba */
  border-radius: 0 0 32px 32px / 0 0 50% 50%;
  box-shadow: 0 2px 16px 0 rgba(0,0,0,0.18);
  min-width: 320px;
  max-width: 90vw;
  white-space: nowrap;
  z-index: 10;
  letter-spacing: 0.03em;
  font-family: 'RobotoSlab-Bold', serif;
}

/* Modo Versículo: Contenedor del texto principal */
#contenido.modo-versiculo #texto-principal {
  position: relative;
  top: 90px; /* Comienza debajo de la referencia */
  max-height: calc(100vh - 90px); /* Altura máxima disponible */
  display: flex;
  align-items: center;
  justify-content: center;  
  padding: 0 2em;
  margin: 0;
  width: 100%;
  box-sizing: border-box;
  transition: font-size 0.3s ease-in-out;
}

/* Modo Himno: Indicador de verso/coro más pequeño */
#contenido.modo-himno #indicador-estrofa {
  font-size: 2.8vw; /* Aún más pequeño que 3.5vw */
}

/* Modo Himno: Referencia en posición original pero con estilo específico */
#contenido.modo-himno #referencia {
  position: absolute;
  top: 20px;
  left: 20px;
  font-size: 2.3vw !important; /* Más grande que 1.8vw */
  text-align: left;
  bottom: unset;
  transform: none;
  font-weight: bold;
}

/* Modo Himno: Letra del himno en negrita */
#contenido.modo-himno #texto-principal {
  font-weight: bold;
}

/* --- DEPURACIÓN: Forzar visibilidad del indicador de estrofa --- */
#indicador-estrofa {
  display: block !important;
  opacity: 1 !important;
  color: #fff !important;
  z-index: 9999 !important;
  position: relative !important;
}



// church_display/src\css\style.css
/* Variables */
/** Variable CSS para el color dorado principal */
:root {
  --color-gris-base:#23272b;
  /* --color-destacado: #ffd700; */
  --color-destacado: #64a8e7;
  --color-play-btn: #64a8e7;
  --color-stop-btn: #ff7b7b;
}


/* Tema oscuro general */
body {
  background: #181c20;
  color: #f1f1f1;
  font-family: 'Segoe UI', Arial, sans-serif;
  margin: 0;
  padding: 56px 1em 2em 1em; /* padding-top igual a la altura del topbar */
  display: block;
  align-items: center;
  align-content: center;
}

button,
select,
input[type="text"] {
  background: var(--color-gris-base);
  color: #f1f1f1;
  border: 1px solid #333;
  border-radius: 4px;
  padding: 0.5em 1em;
  margin: 0.2em 0.5em 0.2em 0;
  font-size: 1em;
}

button:hover,
select:focus,
input[type="text"]:focus {
  background: #2c3136;
  outline: none;
}

hr {
  border: 1px solid #222;
}

/* Switch moderno */
.switch-container {
  display: flex;
  align-items: center;
  gap: 0.5em;
  margin-bottom: 1em;
}

.switch-label {
  font-size: 1em;
  color: #aaa;
}

.switch-input {
  display: none;
}

.slider {
  width: 48px;
  height: 24px;
  background: #333;
  border-radius: 24px;
  position: relative;
  display: inline-block;
  margin: 0 0.5em;
  vertical-align: middle;
}

.slider::before {
  content: '';
  position: absolute;
  left: 4px;
  top: 4px;
  width: 16px;
  height: 16px;
  background: #f1f1f1;
  border-radius: 50%;
  transition: transform 0.2s;
}

.switch-input:checked+.slider::before {
  transform: translateX(24px);
  background: var(--color-destacado);
}

/* Paneles de control */
#controlBiblia,
#controlHimnario {
  margin-bottom: 1em;
  padding-bottom: 10px;
}

#controlBiblia[hidden],
#controlHimnario[hidden] {
  display: none !important;
}

/* Eliminar reglas dinámicas de margin-top para los controles */
body:not(.con-boton-proyector) #controlBiblia,
body:not(.con-boton-proyector) #controlHimnario {
  margin-top: 0;
}

/* Sugerencias de libros */
#sugerenciasLibros {
  background: var(--color-gris-base);
  border: 1px solid #333;
  border-radius: 4px;
  max-height: 180px;
  overflow-y: auto;
  margin-bottom: 0.5em;
  position: fixed;
  z-index: 1000;
  width: 250px;
  display: none;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
}

#sugerenciasLibros div {
  padding: 0.4em 1em;
  cursor: pointer;
  border-bottom: 1px solid #222;
}

#sugerenciasLibros div:last-child {
  border-bottom: none;
}

#sugerenciasLibros div:hover {
  background: #444;
}

#sugerenciasLibros div.selected {
  background: #0057b8;
  color: #fff;
}

/* Contenedor de búsqueda de libros */
#buscarLibro {
  position: relative;
  /* width: 250px; */
  margin: 0 auto;
  margin-bottom: 0.5em;
}

/* Contenedor de búsqueda de himnos */
#buscarHimno {
  /* width: 100%; */
  max-width: 300px;
  margin: 0 auto;
}

/* Inputs de búsqueda más anchos */
#buscarLibro,
#buscarHimno {
  width: 100%;
  max-width: 100vw;
  box-sizing: border-box;  
  padding-left: 0.5em;
  padding-right: 0.5em;
}

/* Ajuste para inputs con botón clear (X) */
#buscarLibro input[type="text"],
#buscarHimno input[type="text"] {
  padding-right: 2.2em !important;
  box-sizing: border-box;
}

/* Grillas de capítulos y versículos */
#grillaCapitulos,
#grillaVersiculos {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(36px, 1fr));
  gap: 0.3em;
  margin: 0.5em 0;
  max-width: 400px;
}

#grillaCapitulos button,
#grillaVersiculos button {
  padding: 0.3em 0;  
  font-size: 0.9em;
  border-radius: 4px;
  background: var(--color-gris-base);
  border: 1px solid #333;
  cursor: pointer;
  min-width: 36px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
}

#grillaCapitulos button:hover,
#grillaVersiculos button:hover {
  background: #2c3136;
  border-color: #555;
}

#grillaCapitulos button.selected,
#grillaVersiculos button.selected {
  background: #0057b8;
  color: #fff;
  border-color: #0057b8;
}

/* Lista de himnos */
#listaHimnos {
  max-height: 250px;
  overflow-y: auto;
  background: var(--color-gris-base);
  border: 1px solid #333;
  border-radius: 4px;
  margin-bottom: 0.5em;
}

#listaHimnos div {
  padding: 0.5em 1em;
  cursor: pointer;
  border-bottom: 1px solid #222;
}

#listaHimnos div:last-child {
  border-bottom: none;
}

#listaHimnos div.selected,
#listaHimnos div:hover {
  background: #0057b8;
  color: #fff;
}

/* Vista previa */
#vistaPrevia {
  background: var(--color-gris-base);
  border-radius: 8px;
  padding: 1em;
  padding-bottom: 150px;
  min-height: 120px;
  margin-bottom: 130px;
  box-shadow: 0 2px 8px #0004;
  display: flex;
  flex-direction: column;
  gap: 0.5em;
}

.card {
  background: #222;
  border-radius: 4px;
  padding: 0.7em 1em;
  margin: 0.2em 0;
  cursor: pointer;
  border: 2px solid transparent;
  transition: border 0.2s, background 0.2s;
}

.card.selected {
  border: 2px solid var(--color-destacado);
  background: #333;
}

/* Navegación */
.nav-controls {
  display: flex;
  gap: 1em;
  justify-content: center;
  margin-bottom: 1em;
}

/* Reproductor de audio */
#audio {
  width: 100%;
  background: var(--color-gris-base);
  border-radius: 4px;
}

.grilla-label {
  font-weight: bold;
  color: var(--color-destacado);
  margin-top: 0.7em;
  margin-bottom: 0.2em;
  font-size: 1.05em;
  letter-spacing: 0.5px;
}

.app-footer {
  position: fixed;
  left: 0;
  right: 0;
  bottom: 60px;
  background: #181c20;
  box-shadow: 0 -2px 12px #0008;
  padding: 0.7em 1em;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 2em;
  z-index: 2000;
}

.app-footer button {
  font-size: 1.1em;
  padding: 0.6em 1.4em;
  border-radius: 6px;
  background: var(--color-gris-base);
  color: var(--color-destacado);
  border: 1px solid #333;
  transition: background 0.2s, color 0.2s;
}

.app-footer button:hover {
  background: #2c3136;
  color: #fff;
}



/* --- Panel de configuración --- */
#configModal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0, 0, 0, 0.6);
  z-index: 2000;
  justify-content: center;
  align-items: center;
}

#configModal[open] {
  display: flex;
}

#configModal>div {
  background: var(--color-gris-base);
  color: #fff;
  border-radius: 10px;
  padding: 2em;
  min-width: 300px;
  max-width: 90vw;
  box-shadow: 0 8px 32px #000a;
  position: relative;
  display: flex;
  flex-direction: column;
  gap: 1.2em;
}

#cerrarConfig {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  color: var(--color-destacado);
  font-size: 1.5em;
  cursor: pointer;
}

#btnConfig {
  position: absolute;
  top: 16px;
  right: 16px;
  background: none;
  border: none;
  cursor: pointer;
  z-index: 1001;
  padding: 0.2em;
  border-radius: 50%;
  transition: background 0.2s;
}

#btnConfig:hover {
  background: #333;
}

#sliderFontBibliaContainer,
#sliderFontHimnarioContainer {
  margin-bottom: 1.5em;
}

#sliderFontsizeBiblia,
#sliderFontsizeHimnario {
  width: 180px;
  margin-top: 0.5em;
}

#fontsizeValueBiblia,
#fontsizeValueHimnario {
  color: var(--color-destacado);
  font-weight: bold;
  margin-left: 0.5em;
}

#opcionSoloReferencia label {
  margin-right: 0.5em;
}

.audio-mode-btn {
  background: var(--color-gris-base);
  color: var(--color-destacado);
  border: 2px solid #333;
  border-radius: 8px;
  padding: 0.4em 0.7em;
  font-size: 1em;
  cursor: pointer;
  min-width: 60px;
  min-height: 48px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  transition: background 0.2s, border 0.2s, color 0.2s;
}

.audio-mode-btn.selected {
  background: var(--color-destacado);
  color: var(--color-gris-base);
  border-color: var(--color-destacado);
}

.audio-mode-btn:not(.selected):hover {
  background: #2c3136;
  color: #fff;
}


#reproductorAudio {
  opacity: 0;
  width: 100%;
  margin-top: 1em;
  background: var(--color-gris-base);
  border-radius: 4px;
}

#abrirProyector {
  width: 100%;
  font-weight: bold;
  align-content: center;
  padding-top: 20px;
  background-color: lightgreen;
  color: #050f08be;
}

#abrirProyector.proyector-abierto {
  background-color: #dc3545 !important;
  color: #fff !important;
}
#abrirProyector.proyector-normal {
  background-color: lightgreen !important;
  color: #050f08be !important;
}


/* --- FOOT NAVBAR ACTIVE BUTTON --- */
.nav-btn.active {
  background: var(--color-destacado) !important;
  color: var(--color-gris-base) !important;
  border-radius: 8px;
  box-shadow: 0 2px 8px #0003;
  transition: background 0.2s, color 0.2s;
}

/* Mini proyector igual al proyector real */
.mini-proyector {
  position: relative;
  background: #181c20;
  border-radius: 12px;
  box-shadow: 0 4px 24px #000a;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
}

.mini-proyector-video {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  z-index: 0;
}

.mini-proyector-content {
  position: relative;
  z-index: 1;
  width: 100%;
  text-align: center;
  color: #fff;
  text-shadow: 0 2px 8px #000, 0 0 2px var(--color-destacado);
  font-family: 'RobotoSlab-Bold', serif !important;
  padding: 2em 1em;
  font-size: 3.5vw !important;
  line-height: 1.2;
  user-select: none;
  pointer-events: none;
}

.mini-proyector-content .referencia {
  display: block;
  font-size: 0.5em;
  color: var(--color-destacado);
  margin-bottom: 0.5em;
  text-shadow: 0 1px 4px #000;
  font-weight: bold;
  letter-spacing: 1px;
}

/* Modo Biblia en mini proyector */
.mini-proyector.modo-biblia .mini-proyector-content .referencia {
  position: absolute;
  top: 0;
  left: 50%;
  transform: translateX(-50%);
  font-size: 1.2vw !important;
  text-align: center;
  font-weight: bold;
  background: rgba(0,0,0,0.7);
  color: #fff;
  padding: 0.2em 2.0em 0.2em 2.0em;
  border-radius: 0 0 32px 32px / 0 0 50% 50%;
  box-shadow: 0 2px 16px 0 rgba(0,0,0,0.18);
  min-width: 120px;
  max-width: 90%;
  white-space: nowrap;
  z-index: 10;
  letter-spacing: 0.03em;
  font-family: 'RobotoSlab-Bold', serif !important;
}

.mini-proyector.modo-biblia .mini-proyector-content {
  position: relative;
  top: 30px;
  max-height: calc(100% - 30px);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 2em;
  margin: 0;
  width: 100%;
  box-sizing: border-box;
}

/* Modo Himno en mini proyector - Los indicadores ahora se manejan con elementos separados en el HTML */

.mini-proyector {
  aspect-ratio: 16/9;
  width: 100%;
  max-width: 900px;
}

.mini-proyector-margin {
  margin-bottom: min(22vh, 120px);
}

body {
  padding-bottom: min(22vh, 120px);
}

.app-footer {
  position: fixed;
  left: 0;
  bottom: 0;
  width: 100vw;
  z-index: 5000;
  background: var(--color-gris-base);
  box-shadow: 0 -2px 12px #000a;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 1em;
  padding: 0.5em 0;
}

.botonera-navegacion {
  position: fixed;
  left: 0;
  bottom: 96px;
  /* Altura del foot navbar */
  width: 100vw;
  z-index: 4000;
  background: var(--color-gris-base);
  box-shadow: 0 -2px 12px #000a;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 1em;  
  padding: 0.5em 0;
  padding-bottom: 1.5em;
  border-top: 1px solid #222;
  border-bottom: 1px solid #111;
  transition: bottom 0.2s;
}

@media (max-width: 600px) {
  .botonera-navegacion {
    bottom: 56px;
  }
}

.btn-control{
  display: flex;
  width: 100%;
  text-align: center;
  align-items: center;
}

/* --- Estilos migrados desde index.html --- */
#topBar {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 56px;
  background: var(--color-gris-base);
  color: var(--color-destacado);
  display: flex;
  align-items: center;
  justify-content: space-between;
  z-index: 4000;
  padding: 0 1.2em;
  box-shadow: 0 2px 12px #000a;
}

#topBarTitulo {
  font-size: 1.5em;
  font-weight: bold;
}
.btn-cambiar-vista {
  background: none;
  border: none;
  color: var(--color-destacado);
  font-size: 1.5em;
  cursor: pointer;
  outline: none;
  display: flex;
  align-items: center;
  gap: 0.5em;
}
.btn-cambiar-vista-text {
  font-size: 0.9em;
}
/* .btn-abrir-proyector {
} */

#configModal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0,0,0,0.6);
  z-index: 2000;
  justify-content: center;
  align-items: center;
}
.config-modal-content {
  background: var(--color-gris-base);
  color: #fff;
  border-radius: 10px;
  padding: 2em;
  min-width: 300px;
  max-width: 90vw;
  box-shadow: 0 8px 32px #000a;
  position: relative;
}
.btn-cerrar-config {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  color: var(--color-destacado);
  font-size: 1.5em;
  cursor: pointer;
}
.config-titulo {
  margin-top: 0;
  color: var(--color-destacado);
}
.slider-font-biblia-container,
.slider-font-himnario-container,
.opcion-solo-referencia,
.opcion-auto-fullscreen {
  margin-bottom: 1.5em;
}

/* --- Estilos migrados del navbar inferior de index.html --- */
.foot-navbar {
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100vw;
  height: 64px;
  background: var(--color-gris-base);
  display: flex;
  justify-content: space-around;
  align-items: center;
  z-index: 5000;
  box-shadow: 0 -2px 12px #000a;
}
.nav-btn {
  background: none;
  border: none;
  color: var(--color-destacado);
  font-size: 2em;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2px;
  cursor: pointer;
  outline: none;
}
.nav-btn-text {
  font-size: 0.7em;
}

/* --- Estilos para los botones de navegación inferiores --- */
.btn-control {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  width: 100%;
  text-align: center;
  gap: 0.5em;
  font-size: 1.1em;
  padding: 0.5em 1.2em;
  background: none;
  border: none;
  color: var(--color-destacado);
  cursor: pointer;
  border-radius: 6px;
  transition: background 0.2s;
  height: 50px;
}
.btn-control:hover {
  background: var(--color-gris-base);
  color: #fffbe7;
}
.btn-control-text {
  display: inline-block;
  text-align: center;
}
.btn-control i {
  font-size: 1.2em;
  vertical-align: middle;
}
#anterior i {
  margin-right: 0.4em;
}
#siguiente i {
  margin-left: 0.4em;
}
#playHimnoFooter i {
  margin-right: 0.4em;
}

/* --- Botones de play redondos --- */
.btn-play-round {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background: var(--color-play-btn);
  color: #fff;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.3em;
  cursor: pointer;
  transition: background 0.2s, transform 0.2s;
  box-shadow: 0 2px 8px #0003; 
}

.btn-play-round:hover {
  background: var(--color-play-btn);
  opacity: 0.8;
  transform: scale(1.05);
}

.btn-play-round.playing {
  background: var(--color-stop-btn);
}

.btn-play-round.playing:hover {
  background: var(--color-stop-btn);
  opacity: 0.8;
}

.btn-play-round-mini {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background: var(--color-play-btn);
  color: #fff;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5em;
  cursor: pointer;
  transition: background 0.2s, transform 0.2s;
  box-shadow: 0 2px 8px #0003;
}

.btn-play-round-mini:hover {
  background: var(--color-play-btn);
  opacity: 0.8;
  transform: scale(1.05);
}

.btn-play-round-mini.playing {
  background: var(--color-stop-btn);
}

.btn-play-round-mini.playing:hover {
  background: var(--color-stop-btn);
  opacity: 0.8;
}

/* --- Botón de pantalla completa --- */
.btn-fullscreen-mini {
  position: absolute;
  bottom: 10px;
  right: 10px;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: rgba(0, 0, 0, 0.7);
  color: #fff;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2em;
  cursor: pointer;
  transition: background 0.2s, transform 0.2s;
  z-index: 10;
  backdrop-filter: blur(5px);
}

.btn-fullscreen-mini:hover {
  background: rgba(0, 0, 0, 0.9);
  transform: scale(1.1);
}

/* --- Modo pantalla completa --- */
body.fullscreen-mode {
  padding: 0 !important;
  overflow: hidden;
}

body.fullscreen-mode #topBar {
  display: none !important;
}

body.fullscreen-mode #footNavbar {
  display: none !important;
}

body.fullscreen-mode #abrirProyector {
  display: none !important;
}

body.fullscreen-mode #controlBiblia,
body.fullscreen-mode #controlHimnario {
  display: none !important;
}

body.fullscreen-mode #vistaPreviaContainer {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: 9999;
  margin: 0;
  padding: 0;
}

body.fullscreen-mode #vistaProyector {
  width: 100vw !important;
  height: 100vh !important;
  border-radius: 0 !important;
  margin: 0 !important;
  max-width: none !important;
}

body.fullscreen-mode #vistaPrevia {
  display: none !important;
}

body.fullscreen-mode #botoneraNavegacion {
  display: none !important;
}

body.fullscreen-mode #playHimnoMiniProyector {
  position: fixed;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  z-index: 10000;
  display: block !important;
}

body.fullscreen-mode .btn-fullscreen-mini {
  position: fixed;
  bottom: 20px;
  right: 20px;
  z-index: 10000;
}

body.modo-biblia #playHimnoMiniProyector {
  display: none !important;
}

#botoneraNavegacion {
  margin-bottom: -35px;
}

/* --- Detección automática de landscape --- */
@media (orientation: landscape) and (max-width: 768px) {
  body.auto-fullscreen-landscape {
    padding: 0 !important;
    overflow: hidden;
  }

  body.auto-fullscreen-landscape #topBar {
    display: none !important;
  }

  body.auto-fullscreen-landscape #footNavbar {
    display: none !important;
  }

  body.auto-fullscreen-landscape #abrirProyector {
    display: none !important;
  }

  body.auto-fullscreen-landscape #controlBiblia,
  body.auto-fullscreen-landscape #controlHimnario {
    display: none !important;
  }

  body.auto-fullscreen-landscape #vistaPreviaContainer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 9999;
    margin: 0;
    padding: 0;
  }

  body.auto-fullscreen-landscape #vistaProyector {
    width: 100vw !important;
    height: 100vh !important;
    border-radius: 0 !important;
    margin: 0 !important;
    max-width: none !important;
  }

  body.auto-fullscreen-landscape #vistaPrevia {
    display: none !important;
  }

  body.auto-fullscreen-landscape #botoneraNavegacion {
    display: none !important;
  }

  body.auto-fullscreen-landscape #playHimnoMiniProyector {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 10000;
    display: block !important;
  }

  body.auto-fullscreen-landscape .btn-fullscreen-mini {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 10000;
  }
}


/* Estilos para pantallas muy pequeñas */
@media (max-width: 480px) {
  body {
    padding: 0.5em 0.3em;
    font-size: 13px;
  }

  /* Grillas más compactas */
  #grillaCapitulos,
  #grillaVersiculos {
    grid-template-columns: repeat(auto-fit, minmax(40px, 1fr));
    gap: 0.3em;
  }

  #grillaCapitulos button,
  #grillaVersiculos button {
    min-width: 40px;
    height: 40px;
    font-size: 14px;
  }

  /* Footer más compacto */
  .app-footer {
    padding: 0.8em 0.3em;
  }

  .app-footer button {
    padding: 0.6em 1em;
    font-size: 14px;
  }

  /* Vista previa más compacta */
  #vistaPrevia {
    min-height: 80px;
    padding: 0.6em;
  }

  .card {
    padding: 0.6em 0.8em;
    font-size: 13px;
  }

  #botoneraNavegacion {
    margin-bottom: 0;
  }
}

@media (max-width: 600px) {
  body {
    padding-top: 64px !important; /* Asegura espacio suficiente para el topbar en móvil */
  }

  #vistaPrevia {
    padding: 0.5em;
    font-size: 0.95em;
  }

  .nav-controls {
    flex-direction: column;
    gap: 0.5em;
  }

  .app-footer {
    flex-direction: column;
    gap: 0.7em;
    padding: 0.7em 0.2em;
  }

  .app-footer button {
    width: 100%;
    font-size: 1em;
  }

  #botoneraNavegacion {
    margin-bottom: 0;
  }
}

/* Estilos específicos para dispositivos móviles */
@media (max-width: 768px) {
  body {
    padding: 1em 0.5em;
    font-size: 14px;
  }

  /* Botones más grandes para touch */
  button,
  select,
  input[type="text"] {
    padding: 0.8em 1em;
    font-size: 16px;
    /* Evita zoom en iOS */
    min-height: 44px;
    /* Tamaño mínimo para touch */
  }

  /* Switch más grande */
  .slider {
    width: 60px;
    height: 30px;
  }

  .slider::before {
    width: 22px;
    height: 22px;
    top: 4px;
    left: 4px;
  }

  .switch-input:checked+.slider::before {
    transform: translateX(30px);
  }

  /* Sugerencias de libros más anchas */
  #sugerenciasLibros {
    width: calc(100% - 2em);
    max-width: none;
    left: 1em;
    right: 1em;
  }

  /* Grillas más grandes */
  #grillaCapitulos,
  #grillaVersiculos {
    grid-template-columns: repeat(auto-fit, minmax(50px, 1fr));
    gap: 0.5em;
  }

  #grillaCapitulos button,
  #grillaVersiculos button {
    min-width: 50px;
    height: 44px;
    font-size: 16px;
  }

  /* Lista de himnos más alta */
  #listaHimnos {
    max-height: 300px;
  }

  /* Vista previa más compacta */
  #vistaPrevia {
    min-height: 100px;
    padding: 0.8em;
  }

  .card {
    padding: 0.8em 1em;
    font-size: 14px;
  }

  /* Footer más espaciado */
  .app-footer {
    padding: 1em 0.5em;
    gap: 0.5em;
  }

  .app-footer button {
    padding: 0.8em 1.2em;
    font-size: 16px;
    min-height: 44px;
  }

  /* Modal de configuración más compacto */
  #configModal>div {
    padding: 1.5em;
    margin: 1em;
    max-width: calc(100vw - 2em);
  }

  /* Botones de modo de audio más grandes */
  .audio-mode-btn {
    padding: 1em 0.8em;
    min-height: 60px;
    font-size: 14px;
  }

  

  /* Select de versión bíblica más ancho */
  #versionBiblia {
    width: 100%;
    max-width: 100vw;
    box-sizing: border-box;
    margin: 0 auto;
    margin-bottom: 0.5em;  
    padding-top: 0.5em;
    padding-left: 0.5em;
    padding-right: 0.5em;    

    /* width: calc(100% - 1em);
    max-width: none; */
  }

  #botoneraNavegacion {
    margin-bottom: 0;
  }
}


/* Mejoras para orientación horizontal en móviles */
@media (max-width: 768px) and (orientation: landscape) {
  body {
    padding: 0.5em;
  }

  /* Layout más compacto */
  #controlBiblia,
  #controlHimnario {
    margin-bottom: 0.5em;
  }

  /* Grillas más pequeñas para aprovechar el espacio */
  #grillaCapitulos,
  #grillaVersiculos {
    grid-template-columns: repeat(auto-fit, minmax(35px, 1fr));
    gap: 0.2em;
  }

  #grillaCapitulos button,
  #grillaVersiculos button {
    min-width: 35px;
    height: 35px;
    font-size: 12px;
  }

  /* Lista de himnos más compacta */
  #listaHimnos {
    max-height: 200px;
  }

  /* Footer más compacto */
  .app-footer {
    padding: 0.5em;
  }

  #botoneraNavegacion {
    margin-bottom: 0;
  }
}

/* Flechas de navegación en el mini proyector */
.mini-proyector-arrow {
  font-size: 3.5em;
  color: #fff;
  opacity: 0.28;
  pointer-events: none;
  user-select: none;
  transition: opacity 0.2s;
  text-shadow: 0 2px 8px #000, 0 0 2px #000;
}
#zonaRetroceder:hover .mini-proyector-arrow,
#zonaAvanzar:hover .mini-proyector-arrow {
  opacity: 0.55;
}

/* --- Accordions para capítulos y versículos --- */
.accordion-container {
  margin-bottom: 0.5em;
  border-radius: 6px;
  background: #23272b;
  box-shadow: 0 2px 8px #0002;
}
.accordion-header {
  padding: 0.7em 1em;
  font-weight: bold;
  color: var(--color-destacado);
  background: #23272b;
  cursor: pointer;
  border-radius: 6px 6px 0 0;
  user-select: none;
  transition: background 0.2s;
}
.accordion-header:hover {
  background: #2c3136;
}
.accordion-content {
  padding: 0.7em 0.5em 0.5em 0.5em;
  display: block;
  transition: max-height 0.3s ease;
}
.accordion-content.collapsed {
  display: none;
}

.referencia-biblia {
  text-align: center;
  font-size: 1.2em;
  color: var(--color-destacado);
  margin: 0.5em 0 1em 0;
}

/* --- Botón limpiar input (X) --- */
.clear-input-btn {
  position: absolute;
  right: 0.8em;
  top: 50%;
  transform: translateY(-50%);
  background: none !important;
  border: none !important;
  color: #e0e0e0 !important;
  font-size: 1.4em !important;
  padding: 0;
  margin: 0;
  cursor: pointer;
  opacity: 1;
  z-index: 20;
  line-height: 1;
  box-shadow: none;
  border-radius: 0;
  width: auto !important;
  height: auto !important;
  min-width: 0 !important;
  min-height: 0 !important;
  max-width: none !important;
  max-height: none !important;
  display: flex !important;
  align-items: center;
  justify-content: center;
}

.clear-input-btn:hover {
  color: #ff7b7b !important;
}

.clear-input-btn .fa-xmark {
  pointer-events: none;
}
.clear-input-btn .fallback-x {
  color: #e0e0e0 !important;
  font-size: 1.1em !important;
  font-weight: normal;
  display: inline;
  vertical-align: middle;
  pointer-events: none;
}
.clear-input-btn i:empty + .fallback-x,
.clear-input-btn i:not(.fa-solid):not(.fa-xmark) + .fallback-x {
  display: inline;
}



// church_display/src\index.html
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="theme-color" content="#181c20">
    <title>Church Display - Control</title>
    <link rel="stylesheet" href="/css/style.css">
    <!-- Font Awesome CDN -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <script src="//cdnjs.cloudflare.com/ajax/libs/socket.io/4.6.1/socket.io.min.js"></script>
    
</head>
<body>
    <!-- Top Bar Sticky -->
    <div id="topBar">
      <span id="topBarTitulo">Biblia</span>
      <button id="btnCambiarVista" class="btn-cambiar-vista">
        <i class="fa-solid fa-list"></i>
        <span class="btn-cambiar-vista-text">Lista</span>
      </button>
    </div>
    
    <button id="abrirProyector" class="btn-abrir-proyector proyector-normal">Abrir Ventana de Proyección</button>
    <!-- Script para deshabilitar el botón en móviles -->
    <!--
    <script>
      // Deshabilitar el botón en móviles solo visualmente (sin usar 'disabled')
      function esDispositivoMovil() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 768;
      }
      document.addEventListener('DOMContentLoaded', function() {
        if (esDispositivoMovil()) {
          var btn = document.getElementById('abrirProyector');
          // btn.disabled = true; // Eliminado: solo CSS
          btn.style.opacity = '0.6';
          btn.style.filter = 'grayscale(0.5)';
          btn.style.cursor = 'not-allowed';
          btn.title = 'No disponible en dispositivos móviles';
          btn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            return false;
          }, true);
        }
      });
    </script>
    -->
    <!-- Modal de configuración -->
    <div id="configModal">
      <div class="config-modal-content">
        <button id="cerrarConfig" class="btn-cerrar-config">&times;</button>
        <h2 class="config-titulo">Configuración</h2>
        <div id="sliderFontBibliaContainer" class="slider-font-biblia-container">
          <label for="sliderFontsizeBiblia">Tamaño de fuente versículos (Biblia):</label><br>
          <input type="range" id="sliderFontsizeBiblia" min="1.5" max="8" step="0.1" value="5">
          <span id="fontsizeValueBiblia">5vw</span>
        </div>
        <div id="sliderFontHimnarioContainer" class="slider-font-himnario-container">
          <label for="sliderFontsizeHimnario">Tamaño de fuente himnos (Himnario):</label><br>
          <input type="range" id="sliderFontsizeHimnario" min="2" max="10" step="0.1" value="5">
          <span id="fontsizeValueHimnario">5vw</span>
        </div>
        <div id="opcionSoloReferencia" class="opcion-solo-referencia">
          <label for="switchSoloReferencia">Solo mostrar referencia bíblica (modo Biblia):</label>
          <input type="checkbox" id="switchSoloReferencia">
        </div>
        <div id="opcionAutoFullscreen" class="opcion-auto-fullscreen">
          <label for="switchAutoFullscreen">Auto pantalla completa en landscape (móvil):</label>
          <input type="checkbox" id="switchAutoFullscreen" checked>
        </div>

      </div>
    </div>
    <hr>
    <!-- Switch para Biblia/Himnario -->
    <!-- <div class="switch-container">
      <label class="switch-label" for="modoSwitch">Himnario</label>
      <input type="checkbox" id="modoSwitch" class="switch-input">
      <span class="slider"></span>
      <label class="switch-label" for="modoSwitch">Biblia</label>
    </div> -->

    <!-- FOOT NAVBAR estilo web app -->
    <nav id="footNavbar" class="foot-navbar">
      <button id="navHimnario" class="nav-btn nav-himnario" title="Himnario">
        <i class="fa-solid fa-music"></i>
        <span class="nav-btn-text">Himnario</span>
      </button>
      <button id="navBiblia" class="nav-btn nav-biblia" title="Biblia">
        <i class="fa-solid fa-book"></i>
        <span class="nav-btn-text">Biblia</span>
      </button>
      <button id="navConfig" class="nav-btn nav-config" title="Configuración">
        <i class="fa-solid fa-cog"></i>
        <span class="nav-btn-text">Config</span>
      </button>
    </nav>

    <!-- Contenedor para la Biblia -->
    <div id="controlBiblia">
        <select id="versionBiblia"></select>
        <div id="buscarLibro" style="position:relative;">
          <input type="text" id="buscarLibroInput" placeholder="Escribe un libro..." style="width:100%;">
          <button id="clearBuscarLibro" class="clear-input-btn" type="button" title="Limpiar" style="display:none;"><i class="fa-solid fa-xmark"></i></button>
        </div>
        <div id="sugerenciasLibros"></div>
        <div class="accordion-container" id="accordionCapitulos">
          <div class="accordion-header" id="headerCapitulos">Capítulos</div>
          <div class="accordion-content" id="contentCapitulos">
            <div id="grillaCapitulos"></div>
          </div>
        </div>
        <div class="accordion-container" id="accordionVersiculos">
          <div class="accordion-header" id="headerVersiculos">Versículos</div>
          <div class="accordion-content" id="contentVersiculos">
            <div id="grillaVersiculos"></div>
          </div>
        </div>
        
    </div>

    <!-- Contenedor para el Himnario -->
    <div id="controlHimnario" style="display:none;">
        <div id="buscarHimno" style="position:relative;">
          <input type="text" id="buscarHimnoInput" placeholder="Nº o Título del himno..." style="width:100%;">
          <button id="clearBuscarHimno" class="clear-input-btn" type="button" title="Limpiar" style="display:none;"><i class="fa-solid fa-xmark"></i></button>
        </div>
        <div id="listaHimnos"></div>
    </div>
    
    <!-- Área de vista previa -->
    <div id="vistaPreviaContainer">
      <div id="vistaPrevia" style="display:block;"></div>
      <div id="vistaProyector" class="mini-proyector mini-proyector-margin" style="display:none;width:100%;margin:0 auto;position:relative;background:#181c20;border-radius:12px;box-shadow:0 4px 24px #000a;overflow:hidden;display:flex;align-items:center;justify-content:center;">
        <div id="zonaRetroceder" style="position:absolute;left:0;top:0;width:50%;height:100%;cursor:pointer;z-index:2;display:flex;align-items:center;justify-content:flex-start;">
          <i class="fa-solid fa-chevron-left mini-proyector-arrow" style="margin-left:12px;"></i>
        </div>
        <div id="zonaAvanzar" style="position:absolute;right:0;top:0;width:50%;height:100%;cursor:pointer;z-index:2;display:flex;align-items:center;justify-content:flex-end;">
          <i class="fa-solid fa-chevron-right mini-proyector-arrow" style="margin-right:12px;"></i>
        </div>
        <video id="miniProyectorVideo" class="mini-proyector-video" autoplay loop muted playsinline style="position:absolute;top:0;left:0;width:100%;height:100%;object-fit:cover;z-index:0;"></video>
        
        <!-- Título del himno en esquina superior izquierda -->
        <div id="miniProyectorTituloHimno" class="mini-proyector-titulo-himno" style="position:absolute;top:10px;left:10px;font-size:1.2vw;font-weight:bold;color:#fff;text-shadow:0 2px 8px #000;z-index:10;max-width:60%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:none;"></div>
        
        <!-- Contador de diapositiva en esquina superior derecha -->
        <div id="miniProyectorContador" class="mini-proyector-contador" style="position:absolute;top:10px;right:10px;font-size:1.2vw;font-weight:bold;color:#fff;text-shadow:0 2px 8px #000;z-index:10;display:none;"></div>
        
        <div id="proyectorPreviewContent" class="mini-proyector-content" style="width:100%;text-align:center;padding:2em;font-size:2.5em;color:#fff;z-index:1;user-select:none;position:relative;"></div>
        <button id="btnFullscreenMini" class="btn-fullscreen-mini" title="Pantalla completa">
          <i class="fa-solid fa-expand"></i>
        </button>
      </div>
      <button id="playHimnoMiniProyector" class="btn-play-round-mini" style="display:none;margin: 1.2em auto 0 auto;">
        <i class="fa-solid fa-play"></i>
      </button>
    </div>

    <!-- Reproductor de audio para himnos -->
    <audio id="reproductorAudio" controls></audio>

    <footer id="botoneraNavegacion" class="botonera-navegacion" style="display:none;">
      <button id="anterior" class="btn-control">
        <i class="fa-solid fa-arrow-left"></i>
        <span class="btn-control-text">Anterior</span>
      </button>
      <button id="playHimnoFooter" class="btn-play-round" style="display:none;">
        <i class="fa-solid fa-play"></i>
      </button>
      <button id="siguiente" class="btn-control">
        <span class="btn-control-text">Siguiente</span>
        <i class="fa-solid fa-arrow-right"></i>
      </button>
    </footer>

    <script src="/src/js/dataManager.js"></script>
    <script src="/src/js/main.js"></script>
    
    <!-- Script de prueba temporal -->
    <script>
        console.log('🚀 Script de prueba iniciado');
        console.log('📱 URL actual:', window.location.href);
        console.log('🔌 SocketIO disponible:', typeof io !== 'undefined' ? 'Sí' : 'No');
        
        // Verificar si main.js se cargó correctamente
        setTimeout(() => {
            console.log('🔍 Verificando carga de main.js...');
            console.log('🔌 Socket global:', typeof window.socket !== 'undefined' ? 'Existe' : 'No existe');
            console.log('🔌 Socket conectado:', typeof window.socket !== 'undefined' && window.socket ? window.socket.connected : 'N/A');
            
            // Verificar si el botón de prueba existe
            const btnPrueba = document.getElementById('btnPrueba');
            console.log('🧪 Botón de prueba:', btnPrueba ? 'Existe' : 'No existe');
            
            if (btnPrueba) {
                console.log('🧪 Agregando evento de prueba directo...');
                btnPrueba.addEventListener('click', function() {
                    console.log('🧪 Botón clickeado (evento directo)');
                    console.log('🔍 Estado del socket:', {
                        existe: typeof window.socket !== 'undefined',
                        socket: window.socket,
                        conectado: window.socket ? window.socket.connected : 'N/A'
                    });
                    
                    if (typeof window.socket !== 'undefined' && window.socket && window.socket.connected) {
                        console.log('✅ Socket disponible, enviando mensaje...');
                        window.socket.emit('update_text', {
                            texto: '🧪 Prueba directa desde HTML',
                            ref: 'Test Directo - ' + new Date().toLocaleTimeString(),
                            soloReferencia: false
                        });
                        console.log('✅ Mensaje enviado (evento directo)');
                        this.textContent = '✅ Enviado!';
                        this.style.background = '#28a745';
                        setTimeout(() => {
                            this.textContent = '🧪 Probar SocketIO';
                            this.style.background = '#28a745';
                        }, 2000);
                    } else {
                        console.log('❌ Socket no disponible (evento directo)');
                        console.log('🔍 Detalles del error:', {
                            socketDefinido: typeof window.socket !== 'undefined',
                            socketValor: window.socket,
                            conectado: window.socket ? window.socket.connected : 'N/A'
                        });
                        this.textContent = '❌ Error!';
                        this.style.background = '#dc3545';
                        setTimeout(() => {
                            this.textContent = '🧪 Probar SocketIO';
                            this.style.background = '#28a745';
                        }, 2000);
                    }
                });
                console.log('✅ Evento agregado al botón');
            } else {
                console.log('❌ No se encontró el botón de prueba');
            }
        }, 3000); // Aumentamos el tiempo para dar más tiempo a que cargue main.js
    </script>

    <!-- --- ABRIR PROYECTOR EN SEGUNDA PANTALLA Y PANTALLA COMPLETA --- -->
    <script>
    document.getElementById('abrirProyector').addEventListener('click', async function() {
        const proyectorUrl = 'src/proyector.html';
        let features = 'toolbar=no,location=no,status=no,menubar=no,scrollbars=no,resizable=yes';
        let width = window.screen.width;
        let height = window.screen.height;
        let left = 0;
        let top = 0;

        // Intentar usar la Screen Enumeration API si está disponible
        if (navigator.getScreens && window.getScreenDetails) {
            try {
                const screens = await window.getScreenDetails();
                if (screens.screens && screens.screens.length > 1) {
                    // Buscar la pantalla secundaria (que no sea la actual)
                    const currentScreen = screens.currentScreen;
                    const secondary = screens.screens.find(s => s !== currentScreen);
                    if (secondary) {
                        width = secondary.width;
                        height = secondary.height;
                        left = secondary.availLeft || secondary.left || 0;
                        top = secondary.availTop || secondary.top || 0;
                    }
                }
            } catch (e) {
                // Si falla, usar la pantalla principal
            }
        } else if (window.screen && window.screen.availWidth && window.screen.availHeight) {
            // Fallback: usar la pantalla principal
            width = window.screen.availWidth;
            height = window.screen.availHeight;
            left = window.screen.availLeft || 0;
            top = window.screen.availTop || 0;
        }

        features += `,width=${width},height=${height},left=${left},top=${top}`;

        // Abrir la ventana del proyector
        const win = window.open(proyectorUrl, 'proyector', features);
        if (win) {
            win.focus();
            // Intentar pantalla completa al cargar
            win.onload = function() {
                if (win.document && win.document.documentElement && win.document.documentElement.requestFullscreen) {
                    win.document.documentElement.requestFullscreen();
                } else if (win.document && win.document.body && win.document.body.requestFullscreen) {
                    win.document.body.requestFullscreen();
                }
            };
        } else {
            alert('No se pudo abrir la ventana del proyector. Por favor, permite los popups.');
        }
    });
    </script>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // --- LÓGICA FOOT NAVBAR ---
        const navHimnario = document.getElementById('navHimnario');
        const navBiblia = document.getElementById('navBiblia');
        const navConfig = document.getElementById('navConfig');
        const controlHimnario = document.getElementById('controlHimnario');
        const controlBiblia = document.getElementById('controlBiblia');
        const configModal = document.getElementById('configModal');
        const topBarTitulo = document.getElementById('topBarTitulo');
        const btnCambiarVista = document.getElementById('btnCambiarVista');
        const vistaPreviaContainer = document.getElementById('vistaPreviaContainer');
        const vistaPrevia = document.getElementById('vistaPrevia');
        const vistaProyector = document.getElementById('vistaProyector');
        
        // Estado inicial: Biblia
        let modoActual = 'biblia';
        window.modoActual = modoActual;
        
        function actualizarModo(modo) {
          // Quitar clase activa de todos
          navHimnario.classList.remove('active');
          navBiblia.classList.remove('active');
          // Poner clase activa solo al botón del modo actual
          if (modo === 'himnario') {
            navHimnario.classList.add('active');
          } else {
            navBiblia.classList.add('active');
          }
          // Usar la función global de main.js para cambiar el modo
          if (typeof window.cambiarModoGlobal === 'function') {
            window.cambiarModoGlobal(modo);
          } else {
            // Fallback: lógica local
            if (modo === 'himnario') {
              controlHimnario.style.display = '';
              controlBiblia.style.display = 'none';
            } else {
              controlHimnario.style.display = 'none';
              controlBiblia.style.display = '';
            }
          }
          modoActual = modo;
          window.modoActual = modo;
        }
        
        navHimnario.addEventListener('click', () => {
          if (typeof window.cambiarModoGlobal === 'function') window.cambiarModoGlobal('himnario', true);
        });
        navBiblia.addEventListener('click', () => {
          if (typeof window.cambiarModoGlobal === 'function') window.cambiarModoGlobal('biblia', true);
          if (typeof window.ocultarPlayFooter === 'function') window.ocultarPlayFooter();
          if (typeof window.actualizarBotonPlayMiniProyector === 'function') window.actualizarBotonPlayMiniProyector();
        });
        navConfig.addEventListener('click', () => {
          configModal.style.display = 'flex';
          // Nunca dejar activo el botón de config
          navHimnario.classList.remove('active');
          navBiblia.classList.remove('active');
        });
        
        // Cerrar modal config
        document.getElementById('cerrarConfig').addEventListener('click', () => {
          configModal.style.display = 'none';
        });
        
        // Inicializar modo
        actualizarModo('biblia');
      });
    </script>
</body>
</html>



// church_display/src\js\dataManager.js
// dataManager.js - Script normal (no módulo)

console.log('📚 dataManager.js cargando...');

/**
 * Obtiene la lista de versiones de la Biblia disponibles.
 * @returns {Promise<Array<{file: string, description: string}>>}
 */
async function getBibleVersions() {
  try {
    // Crear un archivo de índice que liste las biblias disponibles
    // Como no podemos leer el directorio directamente desde el navegador,
    // crearemos un archivo JSON que contenga la lista de biblias
    const response = await fetch('/src/assets/biblias/biblias-disponibles.json');
    if (response.ok) {
      const data = await response.json();
      const biblias = data.biblias || [];
      const descripciones = data.descripciones || {};
      
      // Convertir archivos XML a JSON
      return biblias.map(file => ({
        file: file.replace('.xml', '.json'),
        description: descripciones[file] || file.replace('.xml', '').replace('.json', '')
      }));
    }
    
    // Fallback: lista hardcodeada basada en los archivos JSON disponibles
    const fallbackBiblias = [
      'es-DHH.json',
      'es-NTV.json', 
      'es-rv2015.json',
      'es-rv2020.json',
      'es-rv60.json'
    ];
    
    const fallbackDescripciones = {
      'es-DHH.json': 'Dios Habla Hoy',
      'es-NTV.json': 'Nueva Traducción Viviente',
      'es-rv2015.json': 'Reina Valera 2015',
      'es-rv2020.json': 'Reina Valera 2020',
      'es-rv60.json': 'Reina Valera 1960'
    };
    
    return fallbackBiblias.map(file => ({
      file: file,
      description: fallbackDescripciones[file] || file.replace('.json', '')
    }));
  } catch (error) {
    console.error('Error al cargar las versiones de la Biblia:', error);
    // Fallback: lista hardcodeada basada en los archivos JSON disponibles
    const fallbackBiblias = [
      'es-DHH.json',
      'es-NTV.json', 
      'es-rv2015.json',
      'es-rv2020.json',
      'es-rv60.json'
    ];
    
    const fallbackDescripciones = {
      'es-DHH.json': 'Dios Habla Hoy',
      'es-NTV.json': 'Nueva Traducción Viviente',
      'es-rv2015.json': 'Reina Valera 2015',
      'es-rv2020.json': 'Reina Valera 2020',
      'es-rv60.json': 'Reina Valera 1960'
    };
    
    return fallbackBiblias.map(file => ({
      file: file,
      description: fallbackDescripciones[file] || file.replace('.json', '')
    }));
  }
}

/**
 * Carga y parsea un archivo XML de una Biblia.
 * @param {string} versionFileName - Nombre del archivo XML (ej. 'RVR1960.xml')
 * @returns {Promise<Object>} Objeto con la estructura { Libro: [ [ {verse, text}, ... ], ... ] }
 */
async function parseBible(versionFileName) {
  try {
    const response = await fetch(`/src/assets/biblias/${versionFileName}`);
    
    if (!response.ok) {
      console.error(`Error al cargar el archivo JSON: ${response.status} ${response.statusText}`);
      return null;
    }
    
    const bibleData = await response.json();
    const bible = {};
    
    console.log(`Cargando Biblia desde JSON: ${versionFileName}`);
    console.log(`Encontrados ${Object.keys(bibleData).length} libros en el JSON`);
    
    // Procesar cada libro
    for (const [bookName, chapters] of Object.entries(bibleData)) {
      console.log(`Procesando libro: ${bookName}`);
      bible[bookName] = [];
      
      // Procesar cada capítulo
      for (const [chapterNumber, verses] of Object.entries(chapters)) {
        const chapterArr = [];
        
        // Procesar cada versículo
        for (const [verseNumber, verseText] of Object.entries(verses)) {
          const verseNum = parseInt(verseNumber);
          if (!isNaN(verseNum) && verseText && verseText.trim()) {
            chapterArr.push({ 
              verse: verseNum, 
              text: verseText.trim() 
            });
          }
        }
        
        // Ordenar versículos por número
        chapterArr.sort((a, b) => a.verse - b.verse);
        bible[bookName].push(chapterArr);
      }
    }
    
    console.log('Biblia cargada exitosamente:', Object.keys(bible));
    return bible;
  } catch (err) {
    console.error('Error al parsear la Biblia JSON:', err);
    return null;
  }
}

/**
 * Obtiene el índice de himnos disponibles.
 * @returns {Promise<Array<{number: string, title: string, file: string}>>}
 */
// async function getHymnIndex() {
//   try {
//     // Lista hardcodeada de himnos basada en los archivos disponibles
//     // Esto es una solución temporal hasta que se implemente un sistema de indexación dinámica
//     const himnos = [
//       { number: "001", title: "Cantad alegres al Señor", file: "001 - Cantad alegres al Señor.json" },
//       { number: "002", title: "Da gloria al Señor", file: "002 - Da gloria al Señor.json" },
//       { number: "003", title: "Unidos en espíritu", file: "003 - Unidos en espíritu.json" },
//       { number: "004", title: "Alabanzas sin cesar", file: "004 - Alabanzas sin cesar.json" },
//       { number: "005", title: "A ti, glorioso Dios", file: "005 - A ti, glorioso Dios.json" },
//       { number: "006", title: "¡Hosanna!", file: "006 - ¡Hosanna!.json" },
//       { number: "007", title: "Oh Dios, mi soberano Rey", file: "007 - Oh Dios, mi soberano Rey.json" },
//       { number: "008", title: "¡Suenen dulces himnos!", file: "008 - ¡Suenen dulces himnos!.json" },
//       { number: "009", title: "Alabemos al Señor", file: "009 - Alabemos al Señor.json" },
//       { number: "010", title: "Alaba al Dios de Abraham", file: "010 - Alaba al Dios de Abraham.json" },
//       { number: "011", title: "Alma, bendice al Señor", file: "011 - Alma, bendice al Señor.json" },
//       { number: "012", title: "Todos juntos reunidos", file: "012 - Todos juntos reunidos.json" },
//       { number: "013", title: "Al Dios invisible", file: "013 - Al Dios invisible.json" },
//       { number: "014", title: "Engrandecido sea Dios", file: "014 - Engrandecido sea Dios.json" },
//       { number: "015", title: "Loámoste, ¡oh Dios!", file: "015 - Loámoste, ¡oh Dios!.json" },
//       { number: "016", title: "A nuestro Padre Dios", file: "016 - A nuestro Padre Dios.json" },
//       { number: "017", title: "Oh Padre, eterno Dios", file: "017 - Oh Padre, eterno Dios.json" },
//       { number: "018", title: "Load al Padre", file: "018 - Load al Padre.json" },
//       { number: "019", title: "Padre nuestro", file: "019 - Padre nuestro.json" },
//       { number: "020", title: "A Dios, el Padre celestial", file: "020 - A Dios, el Padre celestial.json" },
//       { number: "021", title: "Gloria sea al Padre", file: "021 - Gloria sea al Padre.json" },
//       { number: "022", title: "Jehová está en su santo templo", file: "022 - Jehová está en su santo templo.json" },
//       { number: "023", title: "¡Silencio! ¡Silencio!", file: "023 - ¡Silencio! ¡Silencio!.json" },
//       { number: "024", title: "Imploramos tu presencia", file: "024 - Imploramos tu presencia.json" },
//       { number: "025", title: "Siento la presencia del Señor", file: "025 - Siento la presencia del Señor.json" },
//       { number: "026", title: "Aquí reunidos", file: "026 - Aquí reunidos.json" },
//       { number: "027", title: "¡Oh Pastor divino, escucha!", file: "027 - ¡Oh Pastor divino, escucha!.json" },
//       { number: "028", title: "Tu pueblo jubiloso", file: "028 - Tu pueblo jubiloso.json" },
//       { number: "029", title: "Del culto el tiempo llega", file: "029 - Del culto el tiempo llega.json" },
//       { number: "030", title: "Abre mis ojos", file: "030 - Abre mis ojos.json" },
//       { number: "031", title: "¡Oh, Señor! al orar", file: "031 - ¡Oh, Señor! al orar.json" },
//       { number: "032", title: "Nos reunimos en tu santuario", file: "032 - Nos reunimos en tu santuario.json" },
//       { number: "033", title: "Tu presencia, Padre amante, invocamos", file: "033 - Tu presencia, Padre amante, invocamos.json" },
//       { number: "034", title: "En momentos así", file: "034 - En momentos así.json" },
//       { number: "035", title: "Oye, oh Señor", file: "035 - Oye, oh Señor.json" },
//       { number: "036", title: "¡Oh, Dios, que oyes cada oración!", file: "036 - ¡Oh, Dios, que oyes cada oración!.json" },
//       { number: "037", title: "Dios os guarde", file: "037 - Dios os guarde.json" },
//       { number: "038", title: "Que Dios te guarde", file: "038 - Que Dios te guarde.json" },
//       { number: "039", title: "Despide hoy tu grey", file: "039 - Despide hoy tu grey.json" },
//       { number: "040", title: "Shalom", file: "040 - Shalom.json" },
//       { number: "041", title: "Gracia, amor y comunión", file: "041 - Gracia, amor y comunión.json" },
//       { number: "042", title: "Queda, Señor", file: "042 - Queda, Señor.json" },
//       { number: "043", title: "Agua de vida", file: "043 - Agua de vida.json" },
//       { number: "044", title: "Despídenos con tu bendición", file: "044 - Despídenos con tu bendición.json" },
//       { number: "045", title: "Después, Señor", file: "045 - Después, Señor.json" },
//       { number: "046", title: "Hoy amanece", file: "046 - Hoy amanece.json" },
//       { number: "047", title: "Por la mañana", file: "047 - Por la mañana.json" },
//       { number: "048", title: "Oh Dios, si he ofendido un corazón", file: "048 - Oh Dios, si he ofendido un corazón.json" },
//       { number: "049", title: "Cristo, ya la noche cierra", file: "049 - Cristo, ya la noche cierra.json" },
//       { number: "050", title: "Baja el sol", file: "050 - Baja el sol.json" },
//       { number: "051", title: "Nuestro sol se pone ya", file: "051 - Nuestro sol se pone ya.json" },
//       { number: "052", title: "Señor Jesús, el día ya se fue", file: "052 - Señor Jesús, el día ya se fue.json" },
//       { number: "053", title: "¡Oh amor de Dios!", file: "053 - ¡Oh amor de Dios!.json" },
//       { number: "054", title: "Tan bueno es Dios", file: "054 - Tan bueno es Dios.json" },
//       { number: "055", title: "Grande, Señor, es tu misericordia", file: "055 - Grande, Señor, es tu misericordia.json" },
//       { number: "056", title: "De tal manera amó", file: "056 - De tal manera amó.json" },
//       { number: "057", title: "Mi Dios me ama", file: "057 - Mi Dios me ama.json" },
//       { number: "058", title: "Grande es el amor divino", file: "058 - Grande es el amor divino.json" },
//       { number: "059", title: "Mirad qué amor", file: "059 - Mirad qué amor.json" },
//       { number: "060", title: "¡Santo! ¡Santo! ¡Santo! Tu gloria llena", file: "060 - ¡Santo! ¡Santo! ¡Santo! Tu gloria llena.json" },
//       { number: "061", title: "Santo, Santo, Santo, Dios Omnipotente", file: "061 - Santo, Santo, Santo, Dios Omnipotente.json" },
//       { number: "062", title: "Santo, Santo, Santo, Santo es el Señor", file: "062 - Santo, Santo, Santo, Santo es el Señor.json" },
//       { number: "063", title: "Al Rey adorad", file: "063 - Al Rey adorad.json" },
//       { number: "064", title: "Yo canto el poder de Dios", file: "064 - Yo canto el poder de Dios.json" },
//       { number: "065", title: "El mundo es de mi Dios", file: "065 - El mundo es de mi Dios.json" },
//       { number: "066", title: "¿Sabes cuántos?", file: "066 - ¿Sabes cuántos.json" },
//       { number: "067", title: "¡Señor, yo te conozco!", file: "067 - ¡Señor, yo te conozco!.json" },
//       { number: "068", title: "Todo lo que ha creado Dios", file: "068 - Todo lo que ha creado Dios.json" },
//       { number: "069", title: "Señor, mi Dios", file: "069 - Señor, mi Dios.json" },
//       { number: "070", title: "¡Nuestro Dios reina!", file: "070 - ¡Nuestro Dios reina!.json" },
//       { number: "071", title: "Cada cosa hermosa", file: "071 - Cada cosa hermosa.json" },
//       { number: "072", title: "Fue un milagro", file: "072 - Fue un milagro.json" },
//       { number: "073", title: "La creación", file: "073 - La creación.json" },
//       { number: "074", title: "Himno al Creador", file: "074 - Himno al Creador.json" },
//       { number: "075", title: "Grande es Jehová", file: "075 - Grande es Jehová.json" },
//       { number: "076", title: "Eterno Dios, mi Creador", file: "076 - Eterno Dios, mi Creador.json" },
//       { number: "077", title: "Sea exaltado", file: "077 - Sea exaltado.json" },
//       { number: "078", title: "¡Al mundo paz!", file: "078 - ¡Al mundo paz!.json" },
//       { number: "079", title: "Se oye un canto en alta esfera", file: "079 - Se oye un canto en alta esfera.json" },
//       { number: "080", title: "Venid, pastorcillos", file: "080 - Venid, pastorcillos.json" },
//       { number: "081", title: "Noche de paz", file: "081 - Noche de paz.json" },
//       { number: "082", title: "Ya repican las campanas", file: "082 - Ya repican las campanas.json" },
//       { number: "083", title: "La primera Navidad", file: "083 - La primera Navidad.json" },
//       { number: "084", title: "Ve, dilo en las montañas", file: "084 - Ve, dilo en las montañas.json" },
//       { number: "085", title: "Allá en el pesebre", file: "085 - Allá en el pesebre.json" },
//       { number: "086", title: "A medianoche en Belén", file: "086 - A medianoche en Belén.json" },
//       { number: "087", title: "Venid, fieles todos", file: "087 - Venid, fieles todos.json" },
//       { number: "088", title: "Oh, aldehuela de Belén", file: "088 - Oh, aldehuela de Belén.json" },
//       { number: "089", title: "Cristianos, alegraos hoy", file: "089 - Cristianos, alegraos hoy.json" },
//       { number: "090", title: "Somos del oriente", file: "090 - Somos del oriente.json" },
//       { number: "091", title: "¿Qué niño es este?", file: "091 - ¿Qué niño es este.json" },
//       { number: "092", title: "Angeles cantando están", file: "092 - Angeles cantando están.json" },
//       { number: "093", title: "Hubo Uno que quiso", file: "093 - Hubo Uno que quiso.json" },
//       { number: "094", title: "Sangró mi soberano Dios", file: "094 - Sangró mi soberano Dios.json" },
//       { number: "095", title: "Un día", file: "095 - Un día.json" },
//       { number: "096", title: "Al contemplar la excelsa cruz", file: "096 - Al contemplar la excelsa cruz.json" },
//       { number: "097", title: "En el monte Calvario", file: "097 - En el monte Calvario.json" },
//       { number: "098", title: "Rostro divino", file: "098 - Rostro divino.json" },
//       { number: "099", title: "Jamás podrá alguien separarnos", file: "099 - Jamás podrá alguien separarnos.json" },
//       { number: "100", title: "¡Dulces momentos!", file: "100 - ¡Dulces momentos!.json" },
//       { number: "101", title: "Cabeza sacrosanta", file: "101 - Cabeza sacrosanta.json" },
//       { number: "102", title: "Cordero de Dios", file: "102 - Cordero de Dios.json" },
//       { number: "103", title: "Jesús resucitado", file: "103 - Jesús resucitado.json" },
//       { number: "104", title: "La tumba le encerró", file: "104 - La tumba le encerró.json" },
//       { number: "105", title: "Cristo ha resucitado", file: "105 - Cristo ha resucitado.json" },
//       { number: "106", title: "Tuya es la gloria", file: "106 - Tuya es la gloria.json" },
//       { number: "107", title: "Canto el gran amor", file: "107 - Canto el gran amor.json" },
//       { number: "108", title: "Amigo fiel es Cristo", file: "108 - Amigo fiel es Cristo.json" },
//       { number: "109", title: "Un buen amigo tengo yo", file: "109 - Un buen amigo tengo yo.json" },
//       { number: "110", title: "Cristo es el mejor amigo", file: "110 - Cristo es el mejor amigo.json" },
//       { number: "111", title: "Como Jesús no hay otro amigo", file: "111 - Como Jesús no hay otro amigo.json" },
//       { number: "112", title: "Ningún otro me amó cual Cristo", file: "112 - Ningún otro me amó cual Cristo.json" },
//       { number: "113", title: "Amor que no me dejarás", file: "113 - Amor que no me dejarás.json" },
//       { number: "114", title: "Dime la antigua historia", file: "114 - Dime la antigua historia.json" },
//       { number: "115", title: "¡Oh, cuán grande amor!", file: "115 - ¡Oh, cuán grande amor!.json" },
//       { number: "116", title: "Cristo está a mi lado", file: "116 - Cristo está a mi lado.json" },
//       { number: "117", title: "No sé por qué", file: "117 - No sé por qué.json" },
//       { number: "118", title: "Cuando estés cansado y abatido", file: "118 - Cuando estés cansado y abatido.json" },
//       { number: "119", title: "De su trono, mi Jesús", file: "119 - De su trono, mi Jesús.json" },
//       { number: "120", title: "¡Cuánto me alegra!", file: "120 - ¡Cuánto me alegra!.json" },
//       { number: "121", title: "Es Jesucristo la vida, la luz", file: "121 - Es Jesucristo la vida, la luz.json" },
//       { number: "122", title: "Divino pastor", file: "122 - Divino pastor.json" },
//       { number: "123", title: "¡Cuánto nos ama Jesús!", file: "123 - ¡Cuánto nos ama Jesús!.json" },
//       { number: "124", title: "Ama el Pastor sus ovejas", file: "124 - Ama el Pastor sus ovejas.json" },
//       { number: "125", title: "Infinito amor de Cristo", file: "125 - Infinito amor de Cristo.json" },
//       { number: "126", title: "Abrigadas y salvas en el redil", file: "126 - Abrigadas y salvas en el redil.json" },
//       { number: "127", title: "Cristo, nombre dulce", file: "127 - Cristo, nombre dulce.json" },
//       { number: "128", title: "¡Tu nombre es dulce, buen Jesús!", file: "128 - ¡Tu nombre es dulce, buen Jesús!.json" },
//       { number: "129", title: "Cual Jesús no hay otro nombre", file: "129 - Cual Jesús no hay otro nombre.json" },
//       { number: "130", title: "Cristo, Cristo, Cristo", file: "130 - Cristo, Cristo, Cristo.json" },
//       { number: "131", title: "Bendito es el nombre de Jesús", file: "131 - Bendito es el nombre de Jesús.json" },
//       { number: "132", title: "Dulce, hermoso nombre es Jesús", file: "132 - Dulce, hermoso nombre es Jesús.json" },
//       { number: "133", title: "Venid, con cánticos venid", file: "133 - Venid, con cánticos venid.json" },
//       { number: "134", title: "Cual mirra fragante", file: "134 - Cual mirra fragante.json" },
//       { number: "135", title: "Cristo, nombre sublime", file: "135 - Cristo, nombre sublime.json" },
//       { number: "136", title: "¡Oh, cuánto amo a Cristo!", file: "136 - ¡Oh, cuánto amo a Cristo!.json" },
//       { number: "137", title: "De Jesús el nombre invoca", file: "137 - De Jesús el nombre invoca.json" },
//       { number: "138", title: "De mi amante Salvador", file: "138 - De mi amante Salvador.json" },
//       { number: "139", title: "La tierna voz del Salvador", file: "139 - La tierna voz del Salvador.json" },
//       { number: "140", title: "Te quiero, te quiero", file: "140 - Te quiero, te quiero.json" },
//       { number: "141", title: "¡Alabadle!", file: "141 - ¡Alabadle!.json" },
//       { number: "142", title: "Venid, cantad de gozo en plenitud", file: "142 - Venid, cantad de gozo en plenitud.json" },
//       { number: "143", title: "Digno eres tú", file: "143 - Digno eres tú.json" },
//       { number: "144", title: "Mi Salvador", file: "144 - Mi Salvador.json" },
//       { number: "145", title: "Con acentos de alegría", file: "145 - Con acentos de alegría.json" },
//       { number: "146", title: "Ni en la tierra", file: "146 - Ni en la tierra.json" },
//       { number: "147", title: "A Dios sea gloria", file: "147 - A Dios sea gloria.json" },
//       { number: "148", title: "Solo Cristo", file: "148 - Solo Cristo.json" },
//       { number: "149", title: "Junto a la cruz do Jesús murió", file: "149 - Junto a la cruz do Jesús murió.json" },
//       { number: "150", title: "A Cristo doy mi canto", file: "150 - A Cristo doy mi canto.json" },
//       { number: "151", title: "Por eso lo amo", file: "151 - Por eso lo amo.json" },
//       { number: "152", title: "A ti, Jesús", file: "152 - A ti, Jesús.json" },
//       { number: "153", title: "Ved a Cristo", file: "153 - Ved a Cristo.json" },
//       { number: "154", title: "Dad gloria al Cordero Rey", file: "154 - Dad gloria al Cordero Rey.json" },
//       { number: "155", title: "En Sion Jesús hoy reina", file: "155 - En Sion Jesús hoy reina.json" },
//       { number: "156", title: "A Cristo coronad", file: "156 - A Cristo coronad.json" },
//       { number: "157", title: "¡Majestad!", file: "157 - ¡Majestad!.json" },
//       { number: "158", title: "Amanece ya la mañana de oro", file: "158 - Amanece ya la mañana de oro.json" },
//       { number: "159", title: "Yo espero la mañana", file: "159 - Yo espero la mañana.json" },
//       { number: "160", title: "Viene otra vez nuestro Salvador", file: "160 - Viene otra vez nuestro Salvador.json" },
//       { number: "161", title: "¡Oh! cuán gratas las nuevas", file: "161 - ¡Oh! cuán gratas las nuevas.json" },
//       { number: "162", title: "En presencia estar de Cristo", file: "162 - En presencia estar de Cristo.json" },
//       { number: "163", title: "Cristo viene, esto es cierto", file: "163 - Cristo viene, esto es cierto.json" },
//       { number: "164", title: "Jesús pronto volverá", file: "164 - Jesús pronto volverá.json" },
//       { number: "165", title: "¡Vendrá el Señor!", file: "165 - ¡Vendrá el Señor!.json" },
//       { number: "166", title: "Siervos de Dios, la trompeta tocad", file: "166 - Siervos de Dios, la trompeta tocad.json" },
//       { number: "167", title: "¿Quién en deslumbrante gloria?", file: "167 - ¿Quién en deslumbrante gloria.json" },
//       { number: "168", title: "El Rey que viene", file: "168 - El Rey que viene.json" },
//       { number: "169", title: "Cuando suene la trompeta", file: "169 - Cuando suene la trompeta.json" },
//       { number: "170", title: "La segunda venida de Cristo", file: "170 - La segunda venida de Cristo.json" },
//       { number: "171", title: "¿Has oído el mensaje?", file: "171 - ¿Has oído el mensaje.json" },
//       { number: "172", title: "Promesa dulce", file: "172 - Promesa dulce.json" },
//       { number: "173", title: "¿Será al albor?", file: "173 - ¿Será al albor.json" },
//       { number: "174", title: "Mira los hitos", file: "174 - Mira los hitos.json" },
//       { number: "175", title: "Ved a Cristo, que se acerca", file: "175 - Ved a Cristo, que se acerca.json" },
//       { number: "176", title: "Tú verás al Rey viniendo", file: "176 - Tú verás al Rey viniendo.json" },
//       { number: "177", title: "Los tres mensajes angélicos", file: "177 - Los tres mensajes angélicos.json" },
//       { number: "178", title: "Contemplé la gloria", file: "178 - Contemplé la gloria.json" },
//       { number: "179", title: "¡Cristo viene! Aquel día se acerca", file: "179 - ¡Cristo viene! Aquel día se acerca.json" },
//       { number: "180", title: "Sí, lo veremos", file: "180 - Sí, lo veremos.json" },
//       { number: "181", title: "Una esperanza", file: "181 - Una esperanza.json" },
//       { number: "182", title: "Veremos a Cristo", file: "182 - Veremos a Cristo.json" },
//       { number: "183", title: "No me olvidé de ti", file: "183 - No me olvidé de ti.json" },
//       { number: "184", title: "Nunca te rindas", file: "184 - Nunca te rindas.json" },
//       { number: "185", title: "Al cielo voy", file: "185 - Al cielo voy.json" },
//       { number: "186", title: "Hace años escuché", file: "186 - Hace años escuché.json" },
//       { number: "187", title: "Aunque anochezca", file: "187 - Aunque anochezca.json" },
//       { number: "188", title: "Gran alegría", file: "188 - Gran alegría.json" },
//       { number: "189", title: "Cristo muy pronto vendrá", file: "189 - Cristo muy pronto vendrá.json" },
//       { number: "190", title: "Santo Espíritu de Cristo", file: "190 - Santo Espíritu de Cristo.json" },
//       { number: "191", title: "La nueva proclamad", file: "191 - La nueva proclamad.json" },
//       { number: "192", title: "Llena mi ser", file: "192 - Llena mi ser.json" },
//       { number: "193", title: "Dios nos ha dado promesa", file: "193 - Dios nos ha dado promesa.json" },
//       { number: "194", title: "Vive en mí", file: "194 - Vive en mí.json" },
//       { number: "195", title: "Abre mis ojos a la luz", file: "195 - Abre mis ojos a la luz.json" },
//       { number: "196", title: "Santo Espíritu de Dios", file: "196 - Santo Espíritu de Dios.json" },
//       { number: "197", title: "Dulce Espíritu", file: "197 - Dulce Espíritu.json" },
//       { number: "198", title: "Desciende, Espíritu de amor", file: "198 - Desciende, Espíritu de amor.json" },
//       { number: "199", title: "Movidos por tu Espíritu", file: "199 - Movidos por tu Espíritu.json" },
//       { number: "200", title: "Bautízanos hoy", file: "200 - Bautízanos hoy.json" },
//       { number: "201", title: "Canción del Espíritu", file: "201 - Canción del Espíritu.json" },
//       { number: "202", title: "Danos el fuego", file: "202 - Danos el fuego.json" },
//       { number: "203", title: "Santo Espíritu llena mi vida", file: "203 - Santo Espíritu llena mi vida.json" },
//       { number: "204", title: "Oh, cantádmelas otra vez", file: "204 - Oh, cantádmelas otra vez.json" },
//       { number: "205", title: "Dadme la Biblia", file: "205 - Dadme la Biblia.json" },
//       { number: "206", title: "Padre, tu Palabra es mi delicia", file: "206 - Padre, tu Palabra es mi delicia.json" },
//       { number: "207", title: "Dios nos habla", file: "207 - Dios nos habla.json" },
//       { number: "208", title: "¡Santa Biblia!", file: "208 - ¡Santa Biblia!.json" },
//       { number: "209", title: "La Biblia nos habla de Cristo", file: "209 - La Biblia nos habla de Cristo.json" },
//       { number: "210", title: "Huye cual ave", file: "210 - Huye cual ave.json" },
//       { number: "211", title: "Fija tus ojos en Cristo", file: "211 - Fija tus ojos en Cristo.json" },
//       { number: "212", title: "A tu puerta Cristo está", file: "212 - A tu puerta Cristo está.json" },
//       { number: "213", title: "Tierno y amante, Jesús nos invita", file: "213 - Tierno y amante, Jesús nos invita.json" },
//       { number: "214", title: "Mientras Jesús te llama", file: "214 - Mientras Jesús te llama.json" },
//       { number: "215", title: "Con voz benigna te llama Jesús", file: "215 - Con voz benigna te llama Jesús.json" },
//       { number: "216", title: "Dios al pródigo llama", file: "216 - Dios al pródigo llama.json" },
//       { number: "217", title: "Bienvenida da Jesús", file: "217 - Bienvenida da Jesús.json" },
//       { number: "218", title: "A Jesucristo ven sin tardar", file: "218 - A Jesucristo ven sin tardar.json" },
//       { number: "219", title: "Tan triste y tan lejos de Dios", file: "219 - Tan triste y tan lejos de Dios.json" },
//       { number: "220", title: "Allá la puerta abierta está", file: "220 - Allá la puerta abierta está.json" },
//       { number: "221", title: "Puertas abiertas encontrarán", file: "221 - Puertas abiertas encontrarán.json" },
//       { number: "222", title: "Del trono celestial", file: "222 - Del trono celestial.json" },
//       { number: "223", title: "Oí la voz del Salvador", file: "223 - Oí la voz del Salvador.json" },
//       { number: "224", title: "Oí la voz del buen Jesús", file: "224 - Oí la voz del buen Jesús.json" },
//       { number: "225", title: "Un hombre llegose de noche a Jesús", file: "225 - Un hombre llegose de noche a Jesús.json" },
//       { number: "226", title: "Buscad primero", file: "226 - Buscad primero.json" },
//       { number: "227", title: "Preste oídos el humano", file: "227 - Preste oídos el humano.json" },
//       { number: "228", title: "Me buscaréis y me hallaréis", file: "228 - Me buscaréis y me hallaréis.json" },
//       { number: "229", title: "¿Has pensado lo que puede costar?", file: "229 - ¿Has pensado lo que puede costar.json" },
//       { number: "230", title: "Abre tu corazón", file: "230 - Abre tu corazón.json" },
//       { number: "231", title: "Todo en el altar", file: "231 - Todo en el altar.json" },
//       { number: "232", title: "Entrégate en oración", file: "232 - Entrégate en oración.json" },
//       { number: "233", title: "Ven a la Fuente de vida", file: "233 - Ven a la Fuente de vida.json" },
//       { number: "234", title: "¿Temes que en la lucha?", file: "234 - ¿Temes que en la lucha.json" },
//       { number: "235", title: "La razón de vivir", file: "235 - La razón de vivir.json" },
//       { number: "236", title: "A Jesús entrega todo", file: "236 - A Jesús entrega todo.json" },
//       { number: "237", title: "Jesús hoy espera entrar en tu ser", file: "237 - Jesús hoy espera entrar en tu ser.json" },
//       { number: "238", title: "Yo escucho, buen Jesús", file: "238 - Yo escucho, buen Jesús.json" },
//       { number: "239", title: "De Dios vagaba lejos yo", file: "239 - De Dios vagaba lejos yo.json" },
//       { number: "240", title: "Te ruego, oh Dios", file: "240 - Te ruego, oh Dios.json" },
//       { number: "241", title: "Perdón te ruego, mi Señor y Dios", file: "241 - Perdón te ruego, mi Señor y Dios.json" },
//       { number: "242", title: "Una es, Señor, mi petición", file: "242 - Una es, Señor, mi petición.json" },
//       { number: "243", title: "Entrego todo a Cristo", file: "243 - Entrego todo a Cristo.json" },
//       { number: "244", title: "Padre, Dios", file: "244 - Padre, Dios.json" },
//       { number: "245", title: "Cúmplase, oh Cristo, tu voluntad", file: "245 - Cúmplase, oh Cristo, tu voluntad.json" },
//       { number: "246", title: "Te quiero, mi Señor", file: "246 - Te quiero, mi Señor.json" },
//       { number: "247", title: "Yo te seguiré", file: "247 - Yo te seguiré.json" },
//       { number: "248", title: "Que mi vida entera esté", file: "248 - Que mi vida entera esté.json" },
//       { number: "249", title: "Tal como soy", file: "249 - Tal como soy.json" },
//       { number: "250", title: "Padre, a tus pies me postro", file: "250 - Padre, a tus pies me postro.json" },
//       { number: "251", title: "No yo, sino él", file: "251 - No yo, sino él.json" },
//       { number: "252", title: "Dejo el mundo", file: "252 - Dejo el mundo.json" },
//       { number: "253", title: "Tuyo soy, Jesús", file: "253 - Tuyo soy, Jesús.json" },
//       { number: "254", title: "Anhelo ser limpio", file: "254 - Anhelo ser limpio.json" },
//       { number: "255", title: "Oh Cristo, te adoro", file: "255 - Oh Cristo, te adoro.json" },
//       { number: "256", title: "Jesús, yo he prometido", file: "256 - Jesús, yo he prometido.json" },
//       { number: "257", title: "¡Oh! ven, te invito, Cristo", file: "257 - ¡Oh! ven, te invito, Cristo.json" },
//       { number: "258", title: "Tú dejaste tu trono", file: "258 - Tú dejaste tu trono.json" },
//       { number: "259", title: "Mi espíritu, alma y cuerpo", file: "259 - Mi espíritu, alma y cuerpo.json" },
//       { number: "260", title: "Junto a la cruz de Cristo", file: "260 - Junto a la cruz de Cristo.json" },
//       { number: "261", title: "Salvador, a ti me rindo", file: "261 - Salvador, a ti me rindo.json" },
//       { number: "262", title: "Los tesoros del mundo", file: "262 - Los tesoros del mundo.json" },
//       { number: "263", title: "Entra en este corazón", file: "263 - Entra en este corazón.json" },
//       { number: "264", title: "Un día más por Cristo", file: "264 - Un día más por Cristo.json" },
//       { number: "265", title: "La senda ancha dejaré", file: "265 - La senda ancha dejaré.json" },
//       { number: "266", title: "Vivo por Cristo", file: "266 - Vivo por Cristo.json" },
//       { number: "267", title: "A la cruz de Cristo voy", file: "267 - A la cruz de Cristo voy.json" },
//       { number: "268", title: "Puedo oír tu voz llamando", file: "268 - Puedo oír tu voz llamando.json" },
//       { number: "269", title: "Prefiero a mi Cristo", file: "269 - Prefiero a mi Cristo.json" },
//       { number: "270", title: "Meditar en Jesús", file: "270 - Meditar en Jesús.json" },
//       { number: "271", title: "Hoy me llama el mundo en vano", file: "271 - Hoy me llama el mundo en vano.json" },
//       { number: "272", title: "De esclavitud", file: "272 - De esclavitud.json" },
//       { number: "273", title: "Tu vida, oh Salvador", file: "273 - Tu vida, oh Salvador.json" },
//       { number: "274", title: "¿Qué te daré, Maestro?", file: "274 - ¿Qué te daré, Maestro.json" },
//       { number: "275", title: "Humilde oración", file: "275 - Humilde oración.json" },
//       { number: "276", title: "Con nuestras mentes", file: "276 - Con nuestras mentes.json" },
//       { number: "277", title: "Amarte más", file: "277 - Amarte más.json" },
//       { number: "278", title: "¿Puede el mundo ver a Jesús en mí?", file: "278 - ¿Puede el mundo ver a Jesús en mí.json" },
//       { number: "279", title: "Transfórmame a tu imagen", file: "279 - Transfórmame a tu imagen.json" },
//       { number: "280", title: "Ser semejante a Jesús", file: "280 - Ser semejante a Jesús.json" },
//       { number: "281", title: "He decidido seguir a Cristo", file: "281 - He decidido seguir a Cristo.json" },
//       { number: "282", title: "¡Brilla, Jesús!", file: "282 - ¡Brilla, Jesús!.json" },
//       { number: "283", title: "Ven, Señor Jesús", file: "283 - Ven, Señor Jesús.json" },
//       { number: "284", title: "Me dice el Salvador", file: "284 - Me dice el Salvador.json" },
//       { number: "285", title: "Confío en Jesucristo", file: "285 - Confío en Jesucristo.json" },
//       { number: "286", title: "Hay una fuente sin igual", file: "286 - Hay una fuente sin igual.json" },
//       { number: "287", title: "Rey de mi vida", file: "287 - Rey de mi vida.json" },
//       { number: "288", title: "Al contemplarte, mi Salvador", file: "288 - Al contemplarte, mi Salvador.json" },
//       { number: "289", title: "¿Qué me puede dar perdón?", file: "289 - ¿Qué me puede dar perdón.json" },
//       { number: "290", title: "Fuente de la vida eterna", file: "290 - Fuente de la vida eterna.json" },
//       { number: "291", title: "Perdido, fui a mi Jesús", file: "291 - Perdido, fui a mi Jesús.json" },
//       { number: "292", title: "Por fe en Cristo, el Redentor", file: "292 - Por fe en Cristo, el Redentor.json" },
//       { number: "293", title: "¿Quieres ser salvo de toda maldad?", file: "293 - ¿Quieres ser salvo de toda maldad.json" },
//       { number: "294", title: "En Jesús por fe confío", file: "294 - En Jesús por fe confío.json" },
//       { number: "295", title: "Las manos, Padre", file: "295 - Las manos, Padre.json" },
//       { number: "296", title: "Comprado con sangre por Cristo", file: "296 - Comprado con sangre por Cristo.json" },
//       { number: "297", title: "Salvado con sangre por Cristo", file: "297 - Salvado con sangre por Cristo.json" },
//       { number: "298", title: "Al Calvario, solo, Jesús ascendió", file: "298 - Al Calvario, solo, Jesús ascendió.json" },
//       { number: "299", title: "Hay vida en mirar", file: "299 - Hay vida en mirar.json" },
//       { number: "300", title: "Lejos de mi Padre Dios", file: "300 - Lejos de mi Padre Dios.json" },
//       { number: "301", title: "Cristo es mi amante Salvador", file: "301 - Cristo es mi amante Salvador.json" },
//       { number: "302", title: "Grato es contar la historia", file: "302 - Grato es contar la historia.json" },
//       { number: "303", title: "Sublime gracia", file: "303 - Sublime gracia.json" },
//       { number: "304", title: "Mi Redentor, el Rey de gloria", file: "304 - Mi Redentor, el Rey de gloria.json" },
//       { number: "305", title: "Maravillosa su gracia es", file: "305 - Maravillosa su gracia es.json" },
//       { number: "306", title: "Llegó Jesús", file: "306 - Llegó Jesús.json" },
//       { number: "307", title: "Roca de la eternidad", file: "307 - Roca de la eternidad.json" },
//       { number: "308", title: "Dios descendió", file: "308 - Dios descendió.json" },
//       { number: "309", title: "La voz de Jesús", file: "309 - La voz de Jesús.json" },
//       { number: "310", title: "Cristo, centro de mi vida", file: "310 - Cristo, centro de mi vida.json" },
//       { number: "311", title: "Cuando junte Jesús las naciones", file: "311 - Cuando junte Jesús las naciones.json" },
//       { number: "312", title: "Día grande viene", file: "312 - Día grande viene.json" },
//       { number: "313", title: "La hora del Juicio", file: "313 - La hora del Juicio.json" },
//       { number: "314", title: "Cristo, Rey omnipotente", file: "314 - Cristo, Rey omnipotente.json" },
//       { number: "315", title: "El Juicio empezó", file: "315 - El Juicio empezó.json" },
//       { number: "316", title: "Hay un mundo feliz más allá", file: "316 - Hay un mundo feliz más allá.json" },
//       { number: "317", title: "En el hogar do nunca habrá", file: "317 - En el hogar do nunca habrá.json" },
//       { number: "318", title: "En la mansión de mi Señor", file: "318 - En la mansión de mi Señor.json" },
//       { number: "319", title: "Cuando mi lucha termine al final", file: "319 - Cuando mi lucha termine al final.json" },
//       { number: "320", title: "Jamás se dice 'adiós' allá", file: "320 - Jamás se dice adiós allá.json" },
//       { number: "321", title: "Allá sobre montes", file: "321 - Allá sobre montes.json" },
//       { number: "322", title: "Busquemos la patria", file: "322 - Busquemos la patria.json" },
//       { number: "323", title: "He de conocerle entonces", file: "323 - He de conocerle entonces.json" },
//       { number: "324", title: "Pronto yo veré a Jesús", file: "324 - Pronto yo veré a Jesús.json" },
//       { number: "325", title: "No puede el mundo ser mi hogar", file: "325 - No puede el mundo ser mi hogar.json" },
//       { number: "326", title: "Un día yo he de faltar", file: "326 - Un día yo he de faltar.json" },
//       { number: "327", title: "Jerusalén, mi amado hogar", file: "327 - Jerusalén, mi amado hogar.json" },
//       { number: "328", title: "¿Nos veremos junto al río?", file: "328 - ¿Nos veremos junto al río.json" },
//       { number: "329", title: "En la célica morada", file: "329 - En la célica morada.json" },
//       { number: "330", title: "Hay un feliz Edén", file: "330 - Hay un feliz Edén.json" },
//       { number: "331", title: "La mañana gloriosa", file: "331 - La mañana gloriosa.json" },
//       { number: "332", title: "En la tierra adonde iré", file: "332 - En la tierra adonde iré.json" },
//       { number: "333", title: "Aunque en esta vida", file: "333 - Aunque en esta vida.json" },
//       { number: "334", title: "Cuánto anhelo llegar", file: "334 - Cuánto anhelo llegar.json" },
//       { number: "335", title: "Mi hogar celestial", file: "335 - Mi hogar celestial.json" },
//       { number: "336", title: "Del bello país he leído", file: "336 - Del bello país he leído.json" },
//       { number: "337", title: "Nunca más adiós", file: "337 - Nunca más adiós.json" },
//       { number: "338", title: "Las riberas de dicha inmortal", file: "338 - Las riberas de dicha inmortal.json" },
//       { number: "339", title: "A veces oigo un himno", file: "339 - A veces oigo un himno.json" },
//       { number: "340", title: "¡Oh, qué música divina!", file: "340 - ¡Oh, qué música divina!.json" },
//       { number: "341", title: "Más cerca del hogar", file: "341 - Más cerca del hogar.json" },
//       { number: "342", title: "Después del río", file: "342 - Después del río.json" },
//       { number: "343", title: "Quiero llegar a ser parte del cielo", file: "343 - Quiero llegar a ser parte del cielo.json" },
//       { number: "344", title: "Entonad un himno", file: "344 - Entonad un himno.json" },
//       { number: "345", title: "Canta, y tus penas se irán", file: "345 - Canta, y tus penas se irán.json" },
//       { number: "346", title: "¡Feliz el día!", file: "346 - ¡Feliz el día!.json" },
//       { number: "347", title: "Con gozo canto al Señor", file: "347 - Con gozo canto al Señor.json" },
//       { number: "348", title: "Dicha grande", file: "348 - Dicha grande.json" },
//       { number: "349", title: "Gran gozo hay en mi alma hoy", file: "349 - Gran gozo hay en mi alma hoy.json" },
//       { number: "350", title: "Andando en la luz de Dios", file: "350 - Andando en la luz de Dios.json" },
//       { number: "351", title: "Yo tengo gozo", file: "351 - Yo tengo gozo.json" },
//       { number: "352", title: "Gozaos, Cristo es Rey", file: "352 - Gozaos, Cristo es Rey.json" },
//       { number: "353", title: "Suenan melodías en mi ser", file: "353 - Suenan melodías en mi ser.json" },
//       { number: "354", title: "Voy caminando", file: "354 - Voy caminando.json" },
//       { number: "355", title: "Yo voy feliz", file: "355 - Yo voy feliz.json" },
//       { number: "356", title: "Gozo es conocer a Cristo", file: "356 - Gozo es conocer a Cristo.json" },
//       { number: "357", title: "Jesús, tú eres mi alegría", file: "357 - Jesús, tú eres mi alegría.json" },
//       { number: "358", title: "En el seno de mi alma", file: "358 - En el seno de mi alma.json" },
//       { number: "359", title: "Regocijaos siempre", file: "359 - Regocijaos siempre.json" },
//       { number: "360", title: "En Jesucristo, mártir de paz", file: "360 - En Jesucristo, mártir de paz.json" },
//       { number: "361", title: "Percibe mi alma un son", file: "361 - Percibe mi alma un son.json" },
//       { number: "362", title: "Con sin igual amor", file: "362 - Con sin igual amor.json" },
//       { number: "363", title: "Hay un canto nuevo en mi ser", file: "363 - Hay un canto nuevo en mi ser.json" },
//       { number: "364", title: "Jesús da paz", file: "364 - Jesús da paz.json" },
//       { number: "365", title: "Elevemos al Señor", file: "365 - Elevemos al Señor.json" },
//       { number: "366", title: "En Cristo hallo amigo", file: "366 - En Cristo hallo amigo.json" },
//       { number: "367", title: "Gracias, Dios", file: "367 - Gracias, Dios.json" },
//       { number: "368", title: "Padre amado", file: "368 - Padre amado.json" },
//       { number: "369", title: "Gratitud y alabanza", file: "369 - Gratitud y alabanza.json" },
//       { number: "370", title: "Por la excelsa majestad", file: "370 - Por la excelsa majestad.json" },
//       { number: "371", title: "Jesús te ama", file: "371 - Jesús te ama.json" },
//       { number: "372", title: "¿Cómo agradecer?", file: "372 - ¿Cómo agradecer.json" },
//       { number: "373", title: "Mi Redentor es Cristo", file: "373 - Mi Redentor es Cristo.json" },
//       { number: "374", title: "Dulce comunión", file: "374 - Dulce comunión.json" },
//       { number: "375", title: "Sed puros y santos", file: "375 - Sed puros y santos.json" },
//       { number: "376", title: "Dulce oración", file: "376 - Dulce oración.json" },
//       { number: "377", title: "A los pies de Jesucristo", file: "377 - A los pies de Jesucristo.json" },
//       { number: "378", title: "¡Oh, qué amigo nos es Cristo!", file: "378 - ¡Oh, qué amigo nos es Cristo!.json" },
//       { number: "379", title: "Habla, Señor, a mi alma", file: "379 - Habla, Señor, a mi alma.json" },
//       { number: "380", title: "Ando con Cristo", file: "380 - Ando con Cristo.json" },
//       { number: "381", title: "De mañana veo su faz", file: "381 - De mañana veo su faz.json" },
//       { number: "382", title: "A solas al huerto yo voy", file: "382 - A solas al huerto yo voy.json" },
//       { number: "383", title: "Habla a tu Dios de mañana", file: "383 - Habla a tu Dios de mañana.json" },
//       { number: "384", title: "El jardín de oración", file: "384 - El jardín de oración.json" },
//       { number: "385", title: "Hablando con Jesús", file: "385 - Hablando con Jesús.json" },
//       { number: "386", title: "Hay un lugar de paz", file: "386 - Hay un lugar de paz.json" },
//       { number: "387", title: "Aparte del mundo", file: "387 - Aparte del mundo.json" },
//       { number: "388", title: "Debo decir a Cristo", file: "388 - Debo decir a Cristo.json" },
//       { number: "389", title: "Conversar con Jesucristo", file: "389 - Conversar con Jesucristo.json" },
//       { number: "390", title: "Soy yo, Señor", file: "390 - Soy yo, Señor.json" },
//       { number: "391", title: "¿Le importará a Jesús?", file: "391 - ¿Le importará a Jesús.json" },
//       { number: "392", title: "Hay quien vela mis pisadas", file: "392 - Hay quien vela mis pisadas.json" },
//       { number: "393", title: "Mi fe contempla a ti", file: "393 - Mi fe contempla a ti.json" },
//       { number: "394", title: "¡Cuán firme cimiento!", file: "394 - ¡Cuán firme cimiento!.json" },
//       { number: "395", title: "¡Oh, cuán dulce es fiar en Cristo!", file: "395 - ¡Oh, cuán dulce es fiar en Cristo!.json" },
//       { number: "396", title: "¡Oh qué Salvador!", file: "396 - ¡Oh qué Salvador!.json" },
//       { number: "397", title: "Oh buen Señor, velada está", file: "397 - Oh buen Señor, velada está.json" },
//       { number: "398", title: "Cuando sopla airada la tempestad", file: "398 - Cuando sopla airada la tempestad.json" },
//       { number: "399", title: "En estos tiempos", file: "399 - En estos tiempos.json" },
//       { number: "400", title: "Castillo fuerte es nuestro Dios", file: "400 - Castillo fuerte es nuestro Dios.json" },
//       { number: "401", title: "Eterna Roca es mi Jesús", file: "401 - Eterna Roca es mi Jesús.json" },
//       { number: "402", title: "¡Oh!, salvo en la Roca", file: "402 - ¡Oh!, salvo en la Roca.json" },
//       { number: "403", title: "Cuando en la lucha", file: "403 - Cuando en la lucha.json" },
//       { number: "404", title: "A cualquiera parte", file: "404 - A cualquiera parte.json" },
//       { number: "405", title: "Sé quién es Jesús", file: "405 - Sé quién es Jesús.json" },
//       { number: "406", title: "Jesús es mi luz", file: "406 - Jesús es mi luz.json" },
//       { number: "407", title: "Muy cerca de mi Redentor", file: "407 - Muy cerca de mi Redentor.json" },
//       { number: "408", title: "Cristo me ayuda por él a vivir", file: "408 - Cristo me ayuda por él a vivir.json" },
//       { number: "409", title: "Si mi débil fe flaqueare", file: "409 - Si mi débil fe flaqueare.json" },
//       { number: "410", title: "Cuando te quiero", file: "410 - Cuando te quiero.json" },
//       { number: "411", title: "Bajo sus alas", file: "411 - Bajo sus alas.json" },
//       { number: "412", title: "Todas las promesas", file: "412 - Todas las promesas.json" },
//       { number: "413", title: "Si la carga es pesada", file: "413 - Si la carga es pesada.json" },
//       { number: "414", title: "¡Oh, buen Maestro, despierta!", file: "414 - ¡Oh, buen Maestro, despierta!.json" },
//       { number: "415", title: "Salvo en los tiernos brazos", file: "415 - Salvo en los tiernos brazos.json" },
//       { number: "416", title: "¡Oh!, tenga yo la ardiente fe", file: "416 - ¡Oh!, tenga yo la ardiente fe.json" },
//       { number: "417", title: "Dame la fe de mi Jesús", file: "417 - Dame la fe de mi Jesús.json" },
//       { number: "418", title: "Padre, yo vengo a ti", file: "418 - Padre, yo vengo a ti.json" },
//       { number: "419", title: "Por la justicia de Jesús", file: "419 - Por la justicia de Jesús.json" },
//       { number: "420", title: "Nunca desmayes", file: "420 - Nunca desmayes.json" },
//       { number: "421", title: "Cariñoso Salvador", file: "421 - Cariñoso Salvador.json" },
//       { number: "422", title: "Nada puede ya faltarme", file: "422 - Nada puede ya faltarme.json" },
//       { number: "423", title: "Pertenezco a mi Rey", file: "423 - Pertenezco a mi Rey.json" },
//       { number: "424", title: "¿Cómo podré estar triste?", file: "424 - ¿Cómo podré estar triste.json" },
//       { number: "425", title: "Día en día", file: "425 - Día en día.json" },
//       { number: "426", title: "Tengo paz", file: "426 - Tengo paz.json" },
//       { number: "427", title: "Lleva todo tu pesar a Cristo", file: "427 - Lleva todo tu pesar a Cristo.json" },
//       { number: "428", title: "Su oveja soy", file: "428 - Su oveja soy.json" },
//       { number: "429", title: "Él puede", file: "429 - Él puede.json" },
//       { number: "430", title: "Solo no estoy", file: "430 - Solo no estoy.json" },
//       { number: "431", title: "A él mis problema le doy", file: "431 - A él mis problema le doy.json" },
//       { number: "432", title: "Como el ciervo", file: "432 - Como el ciervo.json" },
//       { number: "433", title: "Conmigo marcha un ángel", file: "433 - Conmigo marcha un ángel.json" },
//       { number: "434", title: "Jesús es mi vida", file: "434 - Jesús es mi vida.json" },
//       { number: "435", title: "Dios sabe, Dios oye, Dios ve", file: "435 - Dios sabe, Dios oye, Dios ve.json" },
//       { number: "436", title: "Él vive hoy", file: "436 - Él vive hoy.json" },
//       { number: "437", title: "Tu presencia, Padre amado, da consuelo", file: "437 - Tu presencia, Padre amado, da consuelo.json" },
//       { number: "438", title: "Mira hacia Dios", file: "438 - Mira hacia Dios.json" },
//       { number: "439", title: "¡Oh!, quién pudiera andar con Dios", file: "439 - ¡Oh!, quién pudiera andar con Dios.json" },
//       { number: "440", title: "Quiero, Jesús, contigo andar", file: "440 - Quiero, Jesús, contigo andar.json" },
//       { number: "441", title: "Jesús, te necesito", file: "441 - Jesús, te necesito.json" },
//       { number: "442", title: "¡Oh! ¡Maestro y Salvador!", file: "442 - ¡Oh! ¡Maestro y Salvador!.json" },
//       { number: "443", title: "Hay un lugar do quiero estar, cerca de ti", file: "443 - Hay un lugar do quiero estar, cerca de ti.json" },
//       { number: "444", title: "No me pases", file: "444 - No me pases.json" },
//       { number: "445", title: "Más de Jesús", file: "445 - Más de Jesús.json" },
//       { number: "446", title: "Más cerca, oh Dios, de ti", file: "446 - Más cerca, oh Dios, de ti.json" },
//       { number: "447", title: "Más santidad dame", file: "447 - Más santidad dame.json" },
//       { number: "448", title: "Salvador, mi bien eterno", file: "448 - Salvador, mi bien eterno.json" },
//       { number: "449", title: "Cristo, mi piloto sé", file: "449 - Cristo, mi piloto sé.json" },
//       { number: "450", title: "¡Oh Jesús, Pastor divino!", file: "450 - ¡Oh Jesús, Pastor divino!.json" },
//       { number: "451", title: "Cerca, más cerca", file: "451 - Cerca, más cerca.json" },
//       { number: "452", title: "Contigo quiero andar", file: "452 - Contigo quiero andar.json" },
//       { number: "453", title: "Cómo ser cual Cristo", file: "453 - Cómo ser cual Cristo.json" },
//       { number: "454", title: "Yo quisiera andar con Cristo", file: "454 - Yo quisiera andar con Cristo.json" },
//       { number: "455", title: "Mi mano ten", file: "455 - Mi mano ten.json" },
//       { number: "456", title: "Como la mujer de junto al pozo", file: "456 - Como la mujer de junto al pozo.json" },
//       { number: "457", title: "More en mí la belleza del Salvador", file: "457 - More en mí la belleza del Salvador.json" },
//       { number: "458", title: "Orad por mí", file: "458 - Orad por mí.json" },
//       { number: "459", title: "Háblame más de Cristo", file: "459 - Háblame más de Cristo.json" },
//       { number: "460", title: "Quiero estar cerca de Cristo", file: "460 - Quiero estar cerca de Cristo.json" },
//       { number: "461", title: "A tu lado anhelo estar", file: "461 - A tu lado anhelo estar.json" },
//       { number: "462", title: "Dame a Cristo", file: "462 - Dame a Cristo.json" },
//       { number: "463", title: "Mi oración", file: "463 - Mi oración.json" },
//       { number: "464", title: "Ven, inspíranos", file: "464 - Ven, inspíranos.json" },
//       { number: "465", title: "Ven junto a mí", file: "465 - Ven junto a mí.json" },
//       { number: "466", title: "Guíame, ¡oh Salvador!", file: "466 - Guíame, ¡oh Salvador!.json" },
//       { number: "467", title: "¡Siempre el Salvador conmigo!", file: "467 - ¡Siempre el Salvador conmigo!.json" },
//       { number: "468", title: "Paso a paso Dios me guía", file: "468 - Paso a paso Dios me guía.json" },
//       { number: "469", title: "Jesús me guía", file: "469 - Jesús me guía.json" },
//       { number: "470", title: "Guíame, Dios", file: "470 - Guíame, Dios.json" },
//       { number: "471", title: "Condúceme, Maestro", file: "471 - Condúceme, Maestro.json" },
//       { number: "472", title: "Jesús, mi guía es", file: "472 - Jesús, mi guía es.json" },
//       { number: "473", title: "Háblame, y hablaré", file: "473 - Háblame, y hablaré.json" },
//       { number: "474", title: "¿Qué me importan?", file: "474 - ¿Qué me importan.json" },
//       { number: "475", title: "El camino es escabroso", file: "475 - El camino es escabroso.json" },
//       { number: "476", title: "¿Muy lejos el hogar está?", file: "476 - ¿Muy lejos el hogar está.json" },
//       { number: "477", title: "Los que aman al Señor", file: "477 - Los que aman al Señor.json" },
//       { number: "478", title: "Sé fiel siempre, hermano", file: "478 - Sé fiel siempre, hermano.json" },
//       { number: "479", title: "De la mano, Señor", file: "479 - De la mano, Señor.json" },
//       { number: "480", title: "Digno eres, oh Señor", file: "480 - Digno eres, oh Señor.json" },
//       { number: "481", title: "Voy al cielo", file: "481 - Voy al cielo.json" },
//       { number: "482", title: "Quiero cantar", file: "482 - Quiero cantar.json" },
//       { number: "483", title: "Cuando al cielo lleguemos", file: "483 - Cuando al cielo lleguemos.json" },
//       { number: "484", title: "Busca al Señor", file: "484 - Busca al Señor.json" },
//       { number: "485", title: "Unidos en verdad", file: "485 - Unidos en verdad.json" },
//       { number: "486", title: "En los pasos de Jesús", file: "486 - En los pasos de Jesús.json" },
//       { number: "487", title: "Cristo, eres justo Rey", file: "487 - Cristo, eres justo Rey.json" },
//       { number: "488", title: "Al andar con Jesús", file: "488 - Al andar con Jesús.json" },
//       { number: "489", title: "Solo anhelo, Cristo amado", file: "489 - Solo anhelo, Cristo amado.json" },
//       { number: "490", title: "Mejor que los sacrificios", file: "490 - Mejor que los sacrificios.json" },
//       { number: "491", title: "Levántate, cristiano", file: "491 - Levántate, cristiano.json" },
//       { number: "492", title: "¡Trabajad! ¡Trabajad!", file: "492 - ¡Trabajad! ¡Trabajad!.json" },
//       { number: "493", title: "Hoy quiero trabajar contigo", file: "493 - Hoy quiero trabajar contigo.json" },
//       { number: "494", title: "Cerca un alma agobiada está", file: "494 - Cerca un alma agobiada está.json" },
//       { number: "495", title: "Mi deber", file: "495 - Mi deber.json" },
//       { number: "496", title: "Sus manos somos", file: "496 - Sus manos somos.json" },
//       { number: "497", title: "Manos", file: "497 - Manos.json" },
//       { number: "498", title: "Puedes demostrar con tus manos", file: "498 - Puedes demostrar con tus manos.json" },
//       { number: "499", title: "Jesús anduvo por aquí", file: "499 - Jesús anduvo por aquí.json" },
//       { number: "500", title: "Hazme tu siervo", file: "500 - Hazme tu siervo.json" },
//       { number: "501", title: "Mi vida al servicio de Dios", file: "501 - Mi vida al servicio de Dios.json" },
//       { number: "502", title: "Brilla en el sitio donde estés", file: "502 - Brilla en el sitio donde estés.json" },
//       { number: "503", title: "Oh Dios, que deseas la vida", file: "503 - Oh Dios, que deseas la vida.json" },
//       { number: "504", title: "Señor de todos", file: "504 - Señor de todos.json" },
//       { number: "505", title: "Hijo del reino", file: "505 - Hijo del reino.json" },
//       { number: "506", title: "¡De pie, de pie, cristianos!", file: "506 - ¡De pie, de pie, cristianos!.json" },
//       { number: "507", title: "Tentado, no cedas", file: "507 - Tentado, no cedas.json" },
//       { number: "508", title: "Contendamos siempre por nuestra fe", file: "508 - Contendamos siempre por nuestra fe.json" },
//       { number: "509", title: "¡Firmes! ¡Fuertes!", file: "509 - ¡Firmes! ¡Fuertes!.json" },
//       { number: "510", title: "¿Quién está por Cristo?", file: "510 - ¿Quién está por Cristo.json" },
//       { number: "511", title: "Marcharé en la divina luz", file: "511 - Marcharé en la divina luz.json" },
//       { number: "512", title: "Nunca estéis desanimados", file: "512 - Nunca estéis desanimados.json" },
//       { number: "513", title: "Honra al hombre de valor", file: "513 - Honra al hombre de valor.json" },
//       { number: "514", title: "¡Despertad, despertad, oh cristianos!", file: "514 - ¡Despertad, despertad, oh cristianos!.json" },
//       { number: "515", title: "Despliegue el cristiano su santa bandera", file: "515 - Despliegue el cristiano su santa bandera.json" },
//       { number: "516", title: "¡Firmes y adelante!", file: "516 - ¡Firmes y adelante!.json" },
//       { number: "517", title: "De pie, oh grey de Dios", file: "517 - De pie, oh grey de Dios.json" },
//       { number: "518", title: "Jesús está buscando voluntarios hoy", file: "518 - Jesús está buscando voluntarios hoy.json" },
//       { number: "519", title: "Despierta, hermano, sin demorar", file: "519 - Despierta, hermano, sin demorar.json" },
//       { number: "520", title: "¡Adelante! manda el Señor", file: "520 - ¡Adelante! manda el Señor.json" },
//       { number: "521", title: "Al Cristo ved", file: "521 - Al Cristo ved.json" },
//       { number: "522", title: "Suenen las palabras", file: "522 - Suenen las palabras.json" },
//       { number: "523", title: "Los sabios dan su ciencia", file: "523 - Los sabios dan su ciencia.json" },
//       { number: "524", title: "Traían en silencio presentes al Señor", file: "524 - Traían en silencio presentes al Señor.json" },
//       { number: "525", title: "Con gratitud, llegamos", file: "525 - Con gratitud, llegamos.json" },
//       { number: "526", title: "Oh, mi patria, te prometo hoy", file: "526 - Oh, mi patria, te prometo hoy.json" },
//       { number: "527", title: "Señor Jehová, omnipotente Dios", file: "527 - Señor Jehová, omnipotente Dios.json" },
//       { number: "528", title: "Por montañas, muy cansado", file: "528 - Por montañas, muy cansado.json" },
//       { number: "529", title: "Iglesia de Cristo", file: "529 - Iglesia de Cristo.json" },
//       { number: "530", title: "Somos un pequeño pueblo muy feliz", file: "530 - Somos un pequeño pueblo muy feliz.json" },
//       { number: "531", title: "La familia de Dios", file: "531 - La familia de Dios.json" },
//       { number: "532", title: "Sagrado es el amor", file: "532 - Sagrado es el amor.json" },
//       { number: "533", title: "Cuán bueno y agradable", file: "533 - Cuán bueno y agradable.json" },
//       { number: "534", title: "En tu nombre comenzamos", file: "534 - En tu nombre comenzamos.json" },
//       { number: "535", title: "Las faenas terminadas", file: "535 - Las faenas terminadas.json" },
//       { number: "536", title: "En sombras de la tarde", file: "536 - En sombras de la tarde.json" },
//       { number: "537", title: "Sábado santo", file: "537 - Sábado santo.json" },
//       { number: "538", title: "Hoy es día de reposo", file: "538 - Hoy es día de reposo.json" },
//       { number: "539", title: "¡Oh, día delicioso!", file: "539 - ¡Oh, día delicioso!.json" },
//       { number: "540", title: "Ya asoma el sol brillante", file: "540 - Ya asoma el sol brillante.json" },
//       { number: "541", title: "Señor, reposamos", file: "541 - Señor, reposamos.json" },
//       { number: "542", title: "Amo tu sábado", file: "542 - Amo tu sábado.json" },
//       { number: "543", title: "No te olvides nunca del día del Señor", file: "543 - No te olvides nunca del día del Señor.json" },
//       { number: "544", title: "Hoy el sábado glorioso", file: "544 - Hoy el sábado glorioso.json" },
//       { number: "545", title: "Santo día", file: "545 - Santo día.json" },
//       { number: "546", title: "Santo sábado, bendito", file: "546 - Santo sábado, bendito.json" },
//       { number: "547", title: "Sábado es", file: "547 - Sábado es.json" },
//       { number: "548", title: "Mi corazón se llena de alegría", file: "548 - Mi corazón se llena de alegría.json" },
//       { number: "549", title: "Ya el fin se acerca", file: "549 - Ya el fin se acerca.json" },
//       { number: "550", title: "Día santo del Señor", file: "550 - Día santo del Señor.json" },
//       { number: "551", title: "Embajador soy de mi Rey", file: "551 - Embajador soy de mi Rey.json" },
//       { number: "552", title: "¡Oh!, cuánto necesita", file: "552 - ¡Oh!, cuánto necesita.json" },
//       { number: "553", title: "¿Os pusisteis a arar?", file: "553 - ¿Os pusisteis a arar.json" },
//       { number: "554", title: "Con Cristo avanza hoy", file: "554 - Con Cristo avanza hoy.json" },
//       { number: "555", title: "Hoy gozoso medito", file: "555 - Hoy gozoso medito.json" },
//       { number: "556", title: "Yo quiero siempre brillar", file: "556 - Yo quiero siempre brillar.json" },
//       { number: "557", title: "¿Qué estás haciendo por Cristo?", file: "557 - ¿Qué estás haciendo por Cristo.json" },
//       { number: "558", title: "Ama a tus prójimos", file: "558 - Ama a tus prójimos.json" },
//       { number: "559", title: "No te dé temor", file: "559 - No te dé temor.json" },
//       { number: "560", title: "Cristo está buscando obreros", file: "560 - Cristo está buscando obreros.json" },
//       { number: "561", title: "Oigo del Señor la voz llamando", file: "561 - Oigo del Señor la voz llamando.json" },
//       { number: "562", title: "Esparcid la luz de Cristo", file: "562 - Esparcid la luz de Cristo.json" },
//       { number: "563", title: "Escuchad, Jesús nos dice", file: "563 - Escuchad, Jesús nos dice.json" },
//       { number: "564", title: "Pronto la noche viene", file: "564 - Pronto la noche viene.json" },
//       { number: "565", title: "¡Ve, ve oh Sion!", file: "565 - ¡Ve, ve oh Sion!.json" },
//       { number: "566", title: "Centinelas del Maestro", file: "566 - Centinelas del Maestro.json" },
//       { number: "567", title: "Si en valles de peligros", file: "567 - Si en valles de peligros.json" },
//       { number: "568", title: "Hay lugar en la amplia viña", file: "568 - Hay lugar en la amplia viña.json" },
//       { number: "569", title: "Id Y predicad el evangelio", file: "569 - Id Y predicad el evangelio.json" },
//       { number: "570", title: "Voluntario del Señor", file: "570 - Voluntario del Señor.json" },
//       { number: "571", title: "La historia de Cristo contemos", file: "571 - La historia de Cristo contemos.json" },
//       { number: "572", title: "Pescadores de hombres", file: "572 - Pescadores de hombres.json" },
//       { number: "573", title: "Te envío a ti", file: "573 - Te envío a ti.json" },
//       { number: "574", title: "Testimonio", file: "574 - Testimonio.json" },
//       { number: "575", title: "Tocad trompeta ya", file: "575 - Tocad trompeta ya.json" },
//       { number: "576", title: "Proclamo hoy que soy cristiano", file: "576 - Proclamo hoy que soy cristiano.json" },
//       { number: "577", title: "Yo quiero trabajar", file: "577 - Yo quiero trabajar.json" },
//       { number: "578", title: "El pueblo que conoce a su Dios", file: "578 - El pueblo que conoce a su Dios.json" },
//       { number: "579", title: "La fuente veo", file: "579 - La fuente veo.json" },
//       { number: "580", title: "Las aguas del bautismo", file: "580 - Las aguas del bautismo.json" },
//       { number: "581", title: "El Pan de vida soy", file: "581 - El Pan de vida soy.json" },
//       { number: "582", title: "Hoy venimos cual hermanos", file: "582 - Hoy venimos cual hermanos.json" },
//       { number: "583", title: "La Cena de la Comunión", file: "583 - La Cena de la Comunión.json" },
//       { number: "584", title: "Amémonos, hermanos", file: "584 - Amémonos, hermanos.json" },
//       { number: "585", title: "De rodillas partimos hoy el pan", file: "585 - De rodillas partimos hoy el pan.json" },
//       { number: "586", title: "En memoria de mí", file: "586 - En memoria de mí.json" },
//       { number: "587", title: "Te dedicamos, oh Señor", file: "587 - Te dedicamos, oh Señor.json" },
//       { number: "588", title: "Ven, alma que lloras", file: "588 - Ven, alma que lloras.json" },
//       { number: "589", title: "Perfecto amor", file: "589 - Perfecto amor.json" },
//       { number: "590", title: "Guía a ti, Señor", file: "590 - Guía a ti, Señor.json" },
//       { number: "591", title: "Todo es bello en el hogar", file: "591 - Todo es bello en el hogar.json" },
//       { number: "592", title: "Si Dios está, ¡feliz hogar!", file: "592 - Si Dios está, ¡feliz hogar!.json" },
//       { number: "593", title: "Hogar de mis recuerdos", file: "593 - Hogar de mis recuerdos.json" },
//       { number: "594", title: "Señor, gracias por mi hogar", file: "594 - Señor, gracias por mi hogar.json" },
//       { number: "595", title: "Feliz hogar", file: "595 - Feliz hogar.json" },
//       { number: "596", title: "Edificamos familias", file: "596 - Edificamos familias.json" },
//       { number: "597", title: "Oración por un niño", file: "597 - Oración por un niño.json" },
//       { number: "598", title: "Cristo, yo te seguiré", file: "598 - Cristo, yo te seguiré.json" },
//       { number: "599", title: "En este bello día", file: "599 - En este bello día.json" },
//       { number: "600", title: "Cuando venga Jesucristo", file: "600 - Cuando venga Jesucristo.json" },
//       { number: "601", title: "Cuando leo en la Biblia", file: "601 - Cuando leo en la Biblia.json" },
//       { number: "602", title: "Es el amor divino", file: "602 - Es el amor divino.json" },
//       { number: "603", title: "Yo temprano busco a Cristo", file: "603 - Yo temprano busco a Cristo.json" },
//       { number: "604", title: "Bellas las manitas son", file: "604 - Bellas las manitas son.json" },
//       { number: "605", title: "Jesús tiene tiempo", file: "605 - Jesús tiene tiempo.json" },
//       { number: "606", title: "Llama Jesús, el Buen Pastor", file: "606 - Llama Jesús, el Buen Pastor.json" },
//       { number: "607", title: "Nítido rayo por Cristo", file: "607 - Nítido rayo por Cristo.json" },
//       { number: "608", title: "Corazones siempre alegres", file: "608 - Corazones siempre alegres.json" },
//       { number: "609", title: "¡Oh jóvenes, venid!", file: "609 - ¡Oh jóvenes, venid!.json" },
//       { number: "610", title: "Escuchamos tu llamada", file: "610 - Escuchamos tu llamada.json" },
//       { number: "611", title: "Oh, juventud del Rey", file: "611 - Oh, juventud del Rey.json" },
//       { number: "612", title: "Jesús te necesita hoy", file: "612 - Jesús te necesita hoy.json" },
//     ];
    
//     return [...himnos];
//   } catch (err) {
//     console.error('Error al obtener el índice de himnos:', err);
//     return [];
//   }
// }

/**
 * Carga la letra de un himno específico.
 * @param {string} hymnFileName - Nombre del archivo JSON del himno
 * @returns {Promise<Object>} Objeto con la letra del himno
 */
async function parseHymn(hymnFileName) {
  try {
    const response = await fetch(`/src/assets/himnos/letra/${hymnFileName}`);
    if (!response.ok) throw new Error('No se pudo cargar el himno');
    const data = await response.json();
    // Extraer el número del nombre del archivo (ej: "246 - Te quiero, mi Señor.json" -> "246")
    const numeroMatch = hymnFileName.match(/^([0-9]+)/);
    const numero = numeroMatch ? numeroMatch[1] : '';
    const tituloOriginal = data.title || 'Himno';
    const himno = {
      titulo: tituloOriginal,
      numero: numero,
      estrofas: [],
      sections: data.sections || {},
      verses: data.verses // <-- Aseguramos que la clave 'verses' esté presente
    };
    const tituloLimpio = tituloOriginal.replace(/^Himno\s*#?\d*\s*/, '').trim();
    himno.estrofas.push({
      verso: 'titulo',
      texto: `${numero} | ${tituloLimpio}`,
      sectionKey: 'titulo'
    });
    if (data.sections) {
      const sectionKeys = Object.keys(data.sections).sort((a, b) => parseInt(a) - parseInt(b));
      sectionKeys.forEach(sectionKey => {
        const section = data.sections[sectionKey];
        if (section && section.text && Array.isArray(section.text)) {
          const textoCompleto = section.text.join('\n');
          himno.estrofas.push({
            verso: section.verse || sectionKey,
            texto: textoCompleto,
            sectionKey: sectionKey
          });
        }
      });
    }
    console.log('📖 Himno cargado:', {
      numero: himno.numero,
      titulo: himno.titulo,
      estrofas: himno.estrofas.length,
      estructura: himno.estrofas.map((e, i) => `${i}: ${e.verso}`),
      verses: himno.verses
    });
    return himno;
  } catch (err) {
    console.error('Error al cargar el himno:', err);
    return null;
  }
}

// Hacer las funciones disponibles globalmente
console.log('🌐 Haciendo funciones disponibles globalmente...');
window.getBibleVersions = getBibleVersions;
window.parseBible = parseBible;
// window.getHymnIndex = getHymnIndex;
window.parseHymn = parseHymn;
console.log('✅ dataManager.js cargado completamente');



// church_display/src\js\main.js
// main.js - Script normal (no módulo)

// Función para detectar el modo actual (debe estar al inicio)
function esModoBiblia() {
  return window.modoActual === 'biblia';
}

console.log('🚀 main.js iniciando...');

// Variables globales
let proyectorWindow = null;
let proyectorPendienteClick = false;
let socket = null; // Esta será global
let bibliaActual = null;
let indiceHimnos = [];
let capituloActivo = null;
let versiculoActivoIndex = -1;
let estrofaActivaIndex = -1;
let libroActivo = null;
let himnoActivo = null;
// Índices de selección para navegación con teclado
let libroSugeridoIndex = -1;
let himnoSugeridoIndex = -1;
// Variables para pantalla completa
let modoPantallaCompleta = false;
let autoFullscreenLandscape = true; // Habilitado por defecto

// Referencias a elementos del DOM
let elementos = {};

// --- NUEVO: Referencias para la UI mejorada ---
let topBarTitulo = null;
let btnCambiarVista = null;
let vistaPreviaContainer = null;
let vistaPrevia = null;
let vistaProyector = null;
let zonaRetroceder = null;
let zonaAvanzar = null;
let proyectorPreviewContent = null;
let vistaActual = 'lista'; // 'lista' o 'proyector'

// Variable global para saber si está sonando el himno
let himnoSonando = false;
let fadeOutTimeout = null;
// Modo de audio: 'cantado', 'instrumental', 'soloLetra'
let audioMode = 'cantado';

let miniProyectorVideo = null;
let miniProyectorAspect = 16/9; // Valor por defecto
let miniProyectorContainer = null;

console.log('📦 Variables globales inicializadas');

/**
 * Obtiene el valor de una variable CSS
 */
function getCSSVariable(variableName) {
  return getComputedStyle(document.documentElement).getPropertyValue(variableName).trim();
}

/**
 * Inicializa SocketIO
 */
function inicializarSocketIO() {
  console.log('🔌 Iniciando SocketIO...');
  console.log('🔍 SocketIO disponible:', typeof io !== 'undefined' ? 'Sí' : 'No');
  
  try {
    // Conectar a SocketIO
    console.log('📡 Creando conexión SocketIO...');
    socket = io();
    // Hacer socket global
    window.socket = socket;
    
    console.log('📡 SocketIO creado:', socket);
    console.log('🌐 Socket global asignado:', window.socket);
    
    // Eventos de conexión
    socket.on('connect', () => {
      console.log('✅ Conectado al servidor SocketIO - ID:', socket.id);
      console.log('🌐 URL del servidor:', window.location.hostname + ':' + window.location.port);
    });
    
    socket.on('disconnect', () => {
      console.log('❌ Desconectado del servidor SocketIO');
    });
    
    socket.on('connect_error', (error) => {
      console.error('❌ Error de conexión SocketIO:', error);
      console.error('🔍 Detalles del error:', {
        message: error.message,
        description: error.description,
        context: error.context
      });
    });
    
    // Agregar más eventos para debugging
    socket.on('error', (error) => {
      console.error('❌ Error general de SocketIO:', error);
    });
    
    // Evento para cuando el audio termina naturalmente
    socket.on('audioTerminado', (data) => {
      console.log('📥 Audio terminado naturalmente:', data);
      himnoSonando = false;
      actualizarBotonPlayHimno();
    });
    // Evento para cuando el proyector recibe un click
    socket.on('proyectorClick', () => {
      console.log('Evento proyectorClick recibido en el panel de control');
      proyectorPendienteClick = false;
      const boton = document.getElementById('abrirProyector');
      if (boton) {
        boton.style.display = 'none';
        boton.style.pointerEvents = '';
        boton.style.cursor = '';
      }
    });

    // Handler de proyectorAbierto
    socket.on('proyectorAbierto', () => {
      proyectorPendienteClick = true;
      const boton = document.getElementById('abrirProyector');
      if (boton) {
        boton.classList.add('proyector-abierto');
        boton.classList.remove('proyector-normal');
        boton.style.display = '';
        boton.textContent = 'No olvides hacer click en el proyector';
        boton.style.pointerEvents = 'none';
        boton.style.cursor = 'not-allowed';
      }
      actualizarVisibilidadBotonProyector();
    });
    // Handler de proyectorCerrado
    socket.on('proyectorCerrado', () => {
      proyectorPendienteClick = false;
      const boton = document.getElementById('abrirProyector');
      if (boton) {
        boton.classList.remove('proyector-abierto');
        boton.classList.add('proyector-normal');
        boton.style.display = '';
        boton.textContent = 'Abrir Ventana de Proyección';
        boton.style.pointerEvents = '';
        boton.style.cursor = '';
      }
      actualizarVisibilidadBotonProyector();
    });

    // Estado inicial del proyector
    socket.on('estadoProyector', (data) => {
      const boton = document.getElementById('abrirProyector');
      if (data && typeof data.abierto !== 'undefined' && boton) {
        if (data.abierto) {
          proyectorPendienteClick = true;
          boton.classList.add('proyector-abierto');
          boton.classList.remove('proyector-normal');
          boton.style.display = '';
          boton.textContent = 'No olvides hacer click en el proyector';
          boton.style.pointerEvents = 'none';
          boton.style.cursor = 'not-allowed';
        } else {
          proyectorPendienteClick = false;
          boton.classList.remove('proyector-abierto');
          boton.classList.add('proyector-normal');
          boton.style.display = '';
          boton.textContent = 'Abrir Ventana de Proyección';
          boton.style.pointerEvents = '';
          boton.style.cursor = '';
        }
        actualizarVisibilidadBotonProyector();
      }
    });

    console.log('🔌 SocketIO inicializado correctamente');
  } catch (error) {
    console.error('❌ Error al inicializar SocketIO:', error);
  }
}

/**
 * Envía mensaje al proyector
 */
function enviarMensajeProyector(tipo, data) {
  console.log('📤 Intentando enviar mensaje:', { tipo, data });
  console.log('🔌 Estado del socket:', {
    existe: !!socket,
    conectado: socket ? socket.connected : false,
    id: socket ? socket.id : 'N/A'
  });
  
  if (!socket) {
    console.error('❌ SocketIO no inicializado');
    return false;
  }
  
  if (!socket.connected) {
    console.error('❌ SocketIO no conectado');
    return false;
  }
  
  try {
    socket.emit(tipo, data);
    console.log(`✅ Mensaje enviado exitosamente: ${tipo}`, data);
    return true;
  } catch (error) {
    console.error('❌ Error al enviar mensaje:', error);
    return false;
  }
}

/**
 * Envía un versículo al proyector
 */
function enviarVersiculoAlProyector(versiculoIndex) {
  if (!bibliaActual || !libroActivo || capituloActivo === null || versiculoIndex < 0) {
    console.warn('⚠️ No hay versículo válido para enviar');
    return;
  }

  const versiculo = bibliaActual[libroActivo][capituloActivo][versiculoIndex];
  const referencia = `${libroActivo} ${capituloActivo + 1}:${versiculo.verse}`;
  
  // Obtener configuración
  let config = JSON.parse(localStorage.getItem('proyectorConfig')) || { fontsizeBiblia: 5, fontsizeHimnario: 5, soloReferencia: false };
  if (config.soloReferencia) {
    enviarMensajeProyector('update_text', {
      texto: referencia,
      ref: '',
      soloReferencia: true
    });
  } else {
    enviarMensajeProyector('update_text', {
      texto: versiculo.text,
      ref: referencia,
      soloReferencia: false
    });
  }
}

/**
 * Envía una estrofa al proyector
 */
function enviarEstrofaAlProyector(estrofaIndex) {
  if (!himnoActivo || estrofaIndex < 0) {
    console.warn('⚠️ No hay estrofa válida para enviar');
    return;
  }

  const estrofa = himnoActivo.estrofas[estrofaIndex];
  const esTitulo = estrofaIndex === 0;
  const tituloLimpio = himnoActivo.titulo;
  const numeroSinCeros = String(parseInt(himnoActivo.numero, 10));
  const totalVerses = himnoActivo.verses ? parseInt(himnoActivo.verses, 10) : undefined;

  if (esTitulo) {
    enviarMensajeProyector('update_text', {
      texto: `${numeroSinCeros} - ${tituloLimpio}`,
      ref: `${numeroSinCeros} - ${tituloLimpio}`,
      himnoData: {
        esTitulo: true,
        numero: numeroSinCeros,
        titulo: tituloLimpio,
        totalEstrofas: himnoActivo.estrofas.length,
        verses: totalVerses
      }
    });
  } else {
    // Solo enviar la letra de la estrofa, sin ningún indicador de verso
    const textoEstrofa = estrofa.texto;
    const ref = `${numeroSinCeros} - ${tituloLimpio}`;
    // Determinar el valor correcto de 'verse'
    let verseValue = undefined;
    if (typeof estrofa.verse !== 'undefined') {
      verseValue = estrofa.verse;
    } else if (typeof estrofa.verso !== 'undefined') {
      verseValue = estrofa.verso;
    }
    enviarMensajeProyector('update_text', {
      texto: textoEstrofa,
      ref: ref,
      himnoData: {
        esTitulo: false,
        numero: numeroSinCeros,
        titulo: tituloLimpio,
        verse: verseValue,
        estrofaIndex: estrofaIndex,
        totalEstrofas: himnoActivo.estrofas.length,
        seccionActual: estrofaIndex,
        totalSecciones: himnoActivo.estrofas.length - 1,
        verses: totalVerses
      }
    });
  }
  console.log('📤 Estrofa enviada al proyector:', {
    index: estrofaIndex,
    esTitulo: esTitulo,
    texto: esTitulo ? `${numeroSinCeros} - ${tituloLimpio}` : estrofa.texto,
    verso: esTitulo ? 'Título' : estrofa.verso
  });
}

/**
 * Inicializa la aplicación
 */
async function inicializar() {
  console.log('🚀 Función inicializar() ejecutándose...');
  
  // Inicializar SocketIO primero
  console.log('🔌 Llamando a inicializarSocketIO()...');
  inicializarSocketIO();
  
  console.log('📋 Obteniendo referencias a elementos del DOM...');
  // Obtener referencias a elementos del DOM
  elementos = {
    abrirProyector: document.getElementById('abrirProyector'),
    controlBiblia: document.getElementById('controlBiblia'),
    controlHimnario: document.getElementById('controlHimnario'),
    versionBiblia: document.getElementById('versionBiblia'),
    buscarLibroInput: document.getElementById('buscarLibroInput'),
    clearBuscarLibro: document.getElementById('clearBuscarLibro'),
    sugerenciasLibros: document.getElementById('sugerenciasLibros'),
    grillaCapitulos: document.getElementById('grillaCapitulos'),
    grillaVersiculos: document.getElementById('grillaVersiculos'),
    buscarHimnoInput: document.getElementById('buscarHimnoInput'),
    clearBuscarHimno: document.getElementById('clearBuscarHimno'),
    listaHimnos: document.getElementById('listaHimnos'),
    vistaPrevia: document.getElementById('vistaPrevia'),
    anterior: document.getElementById('anterior'),
    siguiente: document.getElementById('siguiente'),
    reproductorAudio: document.getElementById('reproductorAudio'),
    btnCantado: document.getElementById('btnCantado'),
    btnInstrumental: document.getElementById('btnInstrumental'),
    btnSoloLetra: document.getElementById('btnSoloLetra')
  };

  // --- NUEVO: Referencias para la UI mejorada ---
  topBarTitulo = document.getElementById('topBarTitulo');
  btnCambiarVista = document.getElementById('btnCambiarVista');
  vistaPreviaContainer = document.getElementById('vistaPreviaContainer');
  vistaPrevia = document.getElementById('vistaPrevia');
  vistaProyector = document.getElementById('vistaProyector');
  zonaRetroceder = document.getElementById('zonaRetroceder');
  zonaAvanzar = document.getElementById('zonaAvanzar');
  proyectorPreviewContent = document.getElementById('proyectorPreviewContent');
  vistaActual = 'proyector';

  miniProyectorVideo = document.getElementById('miniProyectorVideo');
  miniProyectorContainer = document.getElementById('vistaProyector');

  // Escuchar relación de aspecto del proyector real
  if (window.socket) {
    window.socket.on('aspect_ratio', (data) => {
      if (data && data.aspect) {
        miniProyectorAspect = data.aspect;
        ajustarRelacionAspectoMiniProyector();
      }
    });
  }

  // Estado inicial: modo proyector visible
  if (vistaPrevia) vistaPrevia.style.display = 'none';
  if (vistaProyector) vistaProyector.style.display = 'flex';
  actualizarTopBarTitulo();

  // Botón para alternar vista
  if (btnCambiarVista) {
    btnCambiarVista.addEventListener('click', () => {
      alternarVistaPrevisualizacion();
    });
    // Configurar estado inicial del botón para modo proyector
    const icono = btnCambiarVista.querySelector('i');
    const texto = btnCambiarVista.querySelector('span');
    if (icono) {
      icono.className = 'fa-solid fa-list';
    }
    if (texto) {
      texto.textContent = 'Lista';
    }
  }
  // Zonas de navegación en modo proyector
  if (zonaRetroceder) {
    zonaRetroceder.addEventListener('click', () => navegar(-1));
  }
  if (zonaAvanzar) {
    zonaAvanzar.addEventListener('click', () => navegar(1));
  }

  // Botón de pantalla completa
  const btnFullscreenMini = document.getElementById('btnFullscreenMini');
  if (btnFullscreenMini) {
    btnFullscreenMini.addEventListener('click', alternarPantallaCompleta);
  }

  // Detección de orientación para auto-fullscreen
  window.addEventListener('orientationchange', manejarCambioOrientacion);
  window.addEventListener('resize', manejarCambioOrientacion);

  console.log('✅ Referencias a elementos obtenidas');

  // --- Configuración Panel ---
  const configModal = document.getElementById('configModal');
  const cerrarConfig = document.getElementById('cerrarConfig');
  const sliderFontsizeBiblia = document.getElementById('sliderFontsizeBiblia');
  const fontsizeValueBiblia = document.getElementById('fontsizeValueBiblia');
  const sliderFontsizeHimnario = document.getElementById('sliderFontsizeHimnario');
  const fontsizeValueHimnario = document.getElementById('fontsizeValueHimnario');
  const switchSoloReferencia = document.getElementById('switchSoloReferencia');
  const opcionSoloReferencia = document.getElementById('opcionSoloReferencia');
  const switchAutoFullscreen = document.getElementById('switchAutoFullscreen');
  const opcionAutoFullscreen = document.getElementById('opcionAutoFullscreen');
  const sliderFontBibliaContainer = document.getElementById('sliderFontBibliaContainer');
  const sliderFontHimnarioContainer = document.getElementById('sliderFontHimnarioContainer');

  // Cargar configuración guardada
  let config = JSON.parse(localStorage.getItem('proyectorConfig')) || { fontsizeBiblia: 5, fontsizeHimnario: 5, soloReferencia: false, autoFullscreen: true };
  sliderFontsizeBiblia.value = config.fontsizeBiblia || 5;
  fontsizeValueBiblia.textContent = (config.fontsizeBiblia || 5) + 'vw';
  sliderFontsizeHimnario.value = config.fontsizeHimnario || 5;
  fontsizeValueHimnario.textContent = (config.fontsizeHimnario || 5) + 'vw';
  switchSoloReferencia.checked = !!config.soloReferencia;
  switchAutoFullscreen.checked = config.autoFullscreen !== false; // true por defecto
  autoFullscreenLandscape = config.autoFullscreen !== false;

  // Mostrar/ocultar sliders según modo
  function actualizarOpcionesModo() {
    const esBiblia = esModoBiblia();
    opcionSoloReferencia.style.display = esBiblia ? '' : 'none';
    sliderFontBibliaContainer.style.display = esBiblia ? '' : 'none';
    sliderFontHimnarioContainer.style.display = esBiblia ? 'none' : '';
  }
  
  // Hacer la función global para poder llamarla desde otras funciones
  window.actualizarOpcionesModo = actualizarOpcionesModo;
  
  actualizarOpcionesModo();

  // Cerrar modal
  cerrarConfig.addEventListener('click', () => {
    configModal.style.display = 'none';
  });
  configModal.addEventListener('click', (e) => {
    if (e.target === configModal) configModal.style.display = 'none';
  });

  // Slider de fuente Biblia
  sliderFontsizeBiblia.addEventListener('input', () => {
    fontsizeValueBiblia.textContent = sliderFontsizeBiblia.value + 'vw';
    config.fontsizeBiblia = parseFloat(sliderFontsizeBiblia.value);
    guardarYEnviarConfig();
  });

  // Slider de fuente Himnario
  sliderFontsizeHimnario.addEventListener('input', () => {
    fontsizeValueHimnario.textContent = sliderFontsizeHimnario.value + 'vw';
    config.fontsizeHimnario = parseFloat(sliderFontsizeHimnario.value);
    guardarYEnviarConfig();
  });
  // Switch solo referencia
  switchSoloReferencia.addEventListener('change', () => {
    config.soloReferencia = switchSoloReferencia.checked;
    guardarYEnviarConfig();
  });
  
  // Switch auto fullscreen
  switchAutoFullscreen.addEventListener('change', () => {
    config.autoFullscreen = switchAutoFullscreen.checked;
    autoFullscreenLandscape = switchAutoFullscreen.checked;
    localStorage.setItem('proyectorConfig', JSON.stringify(config));
    
    if (!autoFullscreenLandscape) {
      document.body.classList.remove('auto-fullscreen-landscape');
    } else {
      manejarCambioOrientacion();
    }
  });
  

  function guardarYEnviarConfig() {
    localStorage.setItem('proyectorConfig', JSON.stringify(config));
    // Enviar config al proyector según modo
    const esBiblia = esModoBiblia();
    const configEnviar = {
      fontsize: esBiblia ? config.fontsizeBiblia : config.fontsizeHimnario,
      soloReferencia: esBiblia ? config.soloReferencia : null
    };
    console.log('🔧 guardarYEnviarConfig llamada:', {
      config,
      esBiblia,
      configEnviar
    });
    enviarMensajeProyector('config', configEnviar);
  }
  // Enviar config inicial al abrir proyector
  if (proyectorWindow && !proyectorWindow.closed) {
    const esBiblia = esModoBiblia();
    const configEnviar = {
      fontsize: esBiblia ? config.fontsizeBiblia : config.fontsizeHimnario,
      soloReferencia: esBiblia ? config.soloReferencia : null
    };
    enviarMensajeProyector('config', configEnviar);
  }
  // Enviar config cada vez que se abre el proyector
  const originalAbrirProyector = abrirProyector;
  window.abrirProyector = function() {
    originalAbrirProyector();
    setTimeout(() => {
      const esBiblia = esModoBiblia();
      const configEnviar = {
        fontsize: esBiblia ? config.fontsizeBiblia : config.fontsizeHimnario,
        soloReferencia: esBiblia ? config.soloReferencia : null
      };
      enviarMensajeProyector('config', configEnviar);
    }, 500);
  };

  // Configurar eventos
  configurarEventos();

  // Cargar datos iniciales
  await cargarDatosIniciales();
  
  // Establecer modo inicial
  cambiarModo();

  // Inicializar modo de audio
  inicializarAudioMode();
  
  // Lógica de accordions para capítulos y versículos
  inicializarAccordionsBiblia();
  
  console.log('✅ Función inicializar() completada exitosamente');
  console.log('🔌 Estado final del socket:', {
    existe: typeof window.socket !== 'undefined',
    socket: window.socket,
    conectado: window.socket ? window.socket.connected : 'N/A'
  });
}

/**
 * Configura todos los event listeners
 */
function configurarEventos() {
  // Botón abrir proyector
  elementos.abrirProyector.addEventListener('click', abrirProyector);

  // Eventos modo Biblia
  elementos.versionBiblia.addEventListener('change', cambiarVersionBiblia);
  elementos.buscarLibroInput.addEventListener('keyup', function(e) {
    if (["ArrowUp", "ArrowDown", "Enter"].includes(e.key)) return;
    filtrarLibros();
  });
  elementos.sugerenciasLibros.addEventListener('click', seleccionarLibro);
  // Navegación con teclado en sugerencias de libros
  elementos.buscarLibroInput.addEventListener('keydown', manejarTeclasSugerenciasLibros);
  elementos.grillaCapitulos.addEventListener('click', seleccionarCapitulo);
  elementos.grillaVersiculos.addEventListener('click', seleccionarVersiculo);

  // Eventos modo Himnario
  elementos.buscarHimnoInput.addEventListener('keyup', function(e) {
    if (["ArrowUp", "ArrowDown", "Enter"].includes(e.key)) return;
    filtrarHimnos();
  });
  elementos.listaHimnos.addEventListener('click', seleccionarHimno);
  // Navegación con teclado en lista de himnos
  elementos.buscarHimnoInput.addEventListener('keydown', manejarTeclasListaHimnos);

  // Navegación
  elementos.anterior.addEventListener('click', () => navegar(-1));
  elementos.siguiente.addEventListener('click', () => navegar(1));

  // Botón de play del himno
  const playHimnoFooter = document.getElementById('playHimnoFooter');
  if (playHimnoFooter) {
    playHimnoFooter.addEventListener('click', reproducirHimno);
  }

  // Delegación de eventos para cards dinámicas
  elementos.vistaPrevia.addEventListener('click', manejarClicCard);
  
  // Ocultar sugerencias cuando se hace clic fuera
  document.addEventListener('click', (event) => {
    if (!elementos.buscarLibroInput.contains(event.target) && !elementos.sugerenciasLibros.contains(event.target)) {
      elementos.sugerenciasLibros.style.display = 'none';
    }
  });

  // En configurarEventos, agregar este event listener:
  elementos.buscarLibroInput.addEventListener('keydown', function(e) {
    if (e.key === 'Enter') {
      // Si ya hay libro, capítulo y versículo válidos, lanzar al proyector
      const texto = elementos.buscarLibroInput.value.toLowerCase().trim();
      // Expresión regular para extraer: libro, capítulo y versículo
      const regex = /^(\d+\s)?([\wáéíóúüñ]+)(?:[\s,:\.]+(\d+))?(?:[\s,:\.]+(\d+))?$/i;
      const match = texto.match(regex);
      let nombreLibro = texto;
      let cap = null;
      let vers = null;
      if (match) {
        nombreLibro = (match[1] ? match[1] : '') + match[2];
        nombreLibro = nombreLibro.trim();
        cap = match[3] ? parseInt(match[3], 10) : null;
        vers = match[4] ? parseInt(match[4], 10) : null;
      }
      const libros = Object.keys(bibliaActual);
      const libro = libros.find(l => l.toLowerCase() === nombreLibro);
      if (libro && cap && vers && bibliaActual[libro] && bibliaActual[libro][cap - 1] && bibliaActual[libro][cap - 1][vers - 1]) {
        libroActivo = libro;
        capituloActivo = cap - 1;
        versiculoActivoIndex = vers - 1;
        renderizarGrillaCapitulos(libro);
        // Resaltar capítulo
        elementos.grillaCapitulos.querySelectorAll('button').forEach((btn, idx) => {
          btn.classList.toggle('selected', idx === capituloActivo);
        });
        cargarCapitulo(libro, capituloActivo);
        renderizarGrillaVersiculos();
        // Resaltar versículo
        elementos.grillaVersiculos.querySelectorAll('button').forEach((btn, idx) => {
          btn.classList.toggle('selected', idx === versiculoActivoIndex);
        });
        resaltarCard(versiculoActivoIndex);
        actualizarReferenciaBibliaEnVistaPrevia();
        enviarVersiculoAlProyector(versiculoActivoIndex);
        // Ocultar grillas (accordion)
        mostrarGrillasBiblia(false);
        e.preventDefault();
      }
    }
  });
}

/**
 * Carga los datos iniciales de la aplicación
 */
async function cargarDatosIniciales() {
  console.log('📚 Iniciando carga de datos iniciales...');
  try {
    // Cargar versiones de Biblia
    console.log('📖 Cargando versiones de Biblia...');
    console.log('🔍 getBibleVersions disponible:', typeof getBibleVersions !== 'undefined' ? 'Sí' : 'No');
    
    const versiones = await getBibleVersions();
    console.log('✅ Versiones de Biblia cargadas:', versiones);
    
    elementos.versionBiblia.innerHTML = '<option value="">Selecciona una versión</option>';
    let rv60Index = -1;
    versiones.forEach((version, idx) => {
      const option = document.createElement('option');
      option.value = version.file;
      option.textContent = version.description;
      elementos.versionBiblia.appendChild(option);
      if (version.file === 'es-rv60.json') rv60Index = idx + 1; // +1 por el option vacío
    });
    // Seleccionar por defecto Reina Valera 1960 si existe
    if (rv60Index > 0) {
      elementos.versionBiblia.selectedIndex = rv60Index;
      await cambiarVersionBiblia();
    }
    
    // Cargar índice de himnos desde JSON
    console.log('🎵 Cargando índice de himnos desde JSON...');
    const resp = await fetch('/src/assets/himnos/indice_himnos.json');
    indiceHimnos = await resp.json();
    console.log('✅ Índice de himnos cargado:', indiceHimnos ? indiceHimnos.length + ' himnos' : 'No disponible');
    
    console.log('✅ Datos iniciales cargados exitosamente');
  } catch (error) {
    console.error('❌ Error al cargar datos iniciales:', error);
    console.error('🔍 Detalles del error:', {
      message: error.message,
      stack: error.stack
    });
  }
}

/**
 * Detecta si el dispositivo es móvil
 */
function esDispositivoMovil() {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
         window.innerWidth <= 768;
}

/**
 * Abre la ventana de proyección
 */
function abrirProyector() {
  const esMovil = esDispositivoMovil();
  
  if (esMovil) {
    // Si es móvil, abrir automáticamente en nueva pestaña
    const nuevaPestana = window.open('proyector.html', '_blank');
    
    // Mostrar instrucciones en la página actual
    mostrarInstruccionesMovil();
    
    // Cambiar el texto del botón SOLO por socket
    actualizarVisibilidadBotonProyector();
    // Emitir evento para sincronizar con otros paneles
    if (window.socket) {
      window.socket.emit('proyectorAbierto');
    }
  } else {
    // Si es PC, comportamiento normal
    if (proyectorWindow && !proyectorWindow.closed) {
      proyectorWindow.focus();
    } else {
      proyectorWindow = window.open('proyector.html', 'proyector', 'width=800,height=600');
      proyectorPendienteClick = true;
      // NO cambiar el botón aquí, solo emitir el evento
      if (window.socket) {
        window.socket.emit('proyectorAbierto');
      }
      // Monitorea si la ventana se cierra manualmente
      const checkInterval = setInterval(() => {
        if (!proyectorWindow || proyectorWindow.closed) {
          clearInterval(checkInterval);
          proyectorWindow = null;
          proyectorPendienteClick = false;
          // Restaura el botón SOLO por socket
          if (window.socket) {
            window.socket.emit('proyectorCerrado');
          }
        }
      }, 1000);
    }
  }
}

/**
 * Muestra instrucciones para dispositivos móviles
 */
function mostrarInstruccionesMovil() {
  // Crear o actualizar el elemento de instrucciones
  let instrucciones = document.getElementById('instrucciones-movil');
  if (!instrucciones) {
    instrucciones = document.createElement('div');
    instrucciones.id = 'instrucciones-movil';
    instrucciones.style.cssText = `
      background: #17a2b8;
      color: white;
      padding: 1em;
      margin: 1em 0;
      border-radius: 8px;
      text-align: center;
      font-size: 14px;
    `;
    
    // Insertar después del botón
    const boton = document.getElementById('abrirProyector');
    if (boton && boton.parentNode) {
      boton.parentNode.insertBefore(instrucciones, boton.nextSibling);
    }
  }
  
  instrucciones.innerHTML = `
    <strong>📱 Control Móvil Activo</strong><br>
    ✅ Ventana de proyección abierta en la PC<br>
    🎯 Ahora puedes controlar desde tu celular<br>
    <small>La proyección aparecerá en la nueva pestaña de la PC</small>
  `;
  
  // Ocultar después de 5 segundos
  setTimeout(() => {
    if (instrucciones) {
      instrucciones.style.display = 'none';
    }
  }, 5000);
}

/**
 * Cambia entre modo Biblia e Himnario
 */
function cambiarModo() {
  const esBiblia = esModoBiblia();
  
  // Limpiar todo ANTES de cambiar el modo
  limpiarVistaPrevia();
  limpiarProyector();
  limpiarCamposBusqueda();
  
  if (esBiblia) {
    elementos.controlBiblia.style.display = 'block';
    elementos.controlHimnario.style.display = 'none';
    enviarMensajeProyector('change_mode', { videoSrc: '/src/assets/videos/verso-bg.mp4' });
    ocultarPlayFooter();
    actualizarBotonPlayMiniProyector();
  } else {
    elementos.controlBiblia.style.display = 'none';
    elementos.controlHimnario.style.display = 'block';
    enviarMensajeProyector('change_mode', { videoSrc: '/src/assets/videos/himno-bg.mp4' });
  }
  
  // Actualizar opciones del panel de configuración según el modo
  if (typeof window.actualizarOpcionesModo === 'function') {
    window.actualizarOpcionesModo();
  }
  
  // Enviar configuración actualizada según el modo
  const config = JSON.parse(localStorage.getItem('proyectorConfig')) || { fontsizeBiblia: 5, fontsizeHimnario: 5, soloReferencia: false };
  const configEnviar = {
    fontsize: esBiblia ? config.fontsizeBiblia : config.fontsizeHimnario,
    soloReferencia: esBiblia ? config.soloReferencia : null
  };
  enviarMensajeProyector('config', configEnviar);
  actualizarTopBarTitulo();
  actualizarVistaProyector();
}

/**
 * Función global para cambiar modo desde el foot navbar
 * Esta función se puede llamar desde index.html
 */
function cambiarModoGlobal(modo, propagar = true) {
  console.log('🔄 Cambiando modo global a:', modo);
  window.modoActual = modo;
  // --- Actualizar visualmente los botones del navbar ---
  const navHimnario = document.getElementById('navHimnario');
  const navBiblia = document.getElementById('navBiblia');
  if (navHimnario && navBiblia) {
    navHimnario.classList.remove('active');
    navBiblia.classList.remove('active');
    if (modo === 'himnario') {
      navHimnario.classList.add('active');
    } else {
      navBiblia.classList.add('active');
    }
  }
  // NO limpiar la selección del modo anterior
  if (modo === 'himnario') {
    elementos.controlHimnario.style.display = 'block';
    elementos.controlBiblia.style.display = 'none';
    enviarMensajeProyector('change_mode', { videoSrc: '/src/assets/videos/himno-bg.mp4' });
    console.log('🎵 Modo Himnario activado - Video: /src/assets/videos/himno-bg.mp4');
    document.body.classList.add('modo-himnario');
    document.body.classList.remove('modo-biblia');
    if (window.memoriaUltima && window.memoriaUltima.himnario) {
      seleccionarEstadoHimnario(window.memoriaUltima.himnario);
    }
  } else {
    elementos.controlBiblia.style.display = 'block';
    elementos.controlHimnario.style.display = 'none';
    enviarMensajeProyector('change_mode', { videoSrc: '/src/assets/videos/verso-bg.mp4' });
    ocultarPlayFooter();
    console.log('📖 Modo Biblia activado - Video: /src/assets/videos/verso-bg.mp4');
    document.body.classList.add('modo-biblia');
    document.body.classList.remove('modo-himnario');
    if (window.memoriaUltima && window.memoriaUltima.biblia) {
      seleccionarEstadoBiblia(window.memoriaUltima.biblia);
    }
  }
  if (typeof window.actualizarOpcionesModo === 'function') {
    window.actualizarOpcionesModo();
  }
  const config = JSON.parse(localStorage.getItem('proyectorConfig')) || { fontsizeBiblia: 5, fontsizeHimnario: 5, soloReferencia: false };
  const configEnviar = {
    fontsize: modo === 'biblia' ? config.fontsizeBiblia : config.fontsizeHimnario,
    soloReferencia: modo === 'biblia' ? config.soloReferencia : null
  };
  enviarMensajeProyector('config', configEnviar);
  actualizarTopBarTitulo();
  actualizarVistaProyector();
  actualizarBotonPlayMiniProyector();
  console.log('✅ Cambio de modo completado');
  if (propagar) {
    actualizarMemoriaServidor({ modo });
  }
}

/**
 * Cambia la versión de la Biblia
 */
async function cambiarVersionBiblia() {
  const version = elementos.versionBiblia.value;
  if (!version) return;

  try {
    console.log('Cargando versión de Biblia:', version);
    bibliaActual = await parseBible(version);
    if (bibliaActual) {
      console.log('Biblia cargada exitosamente. Libros disponibles:', Object.keys(bibliaActual));
      limpiarGrillas();
      mostrarSugerenciasLibros();
    } else {
      console.error('No se pudo cargar la Biblia');
    }
  } catch (error) {
    console.error('Error al cargar la Biblia:', error);
  }
}

/**
 * Filtra libros según el texto ingresado
 */
function filtrarLibros() {
  if (!bibliaActual) return;
  const textoInput = elementos.buscarLibroInput.value;
  const texto = normalizarTexto(textoInput.toLowerCase().trim());
  if (texto.length === 0) {
    elementos.sugerenciasLibros.style.display = 'none';
    libroSugeridoIndex = -1;
    return;
  }

  // Expresión regular para extraer: libro, capítulo y versículo
  const regex = /^(\d+\s)?([\wáéíóúüñ]+)(?:[\s,:\.]+(\d+))?(?:[\s,:\.]+(\d+))?$/i;
  const match = textoInput.match(regex);
  let nombreLibro = texto;
  let cap = null;
  let vers = null;
  if (match) {
    nombreLibro = normalizarTexto(((match[1] ? match[1] : '') + match[2]).trim());
    cap = match[3] ? parseInt(match[3], 10) : null;
    vers = match[4] ? parseInt(match[4], 10) : null;
  }

  // Buscar libros que coincidan con el nombre (normalizado)
  const libros = Object.keys(bibliaActual);
  const filtrados = libros.filter(libro => 
    normalizarTexto(libro).includes(nombreLibro)
  );
  libroSugeridoIndex = filtrados.length > 0 ? 0 : -1;

  // --- NUEVO: Si el usuario ya escribió un libro válido seguido de un espacio, nunca mostrar sugerencias ---
  // Ejemplo: "Juan "
  const partes = textoInput.split(/\s+/);
  let nombreLibroInput = partes[0];
  if (partes.length > 1 && partes[0].length > 0) {
    // Si el primer "palabra" es un libro válido y hay un espacio después
    const libroValido = libros.find(l => normalizarTexto(l) === normalizarTexto(nombreLibroInput));
    if (libroValido && textoInput.match(/^\s*\S+\s/)) {
      elementos.sugerenciasLibros.style.display = 'none';
    } else {
      mostrarSugerenciasLibros(filtrados);
    }
  } else {
    // Lógica original para el caso sin espacio
    const terminaConEspacio = /^(\d+\s)?[\wáéíóúüñ]+\s$/i.test(textoInput);
    if (terminaConEspacio) {
      elementos.sugerenciasLibros.style.display = 'none';
    } else {
      mostrarSugerenciasLibros(filtrados);
    }
  }

  // Selección automática de libro/capítulo/versículo en tiempo real
  const libro = libros.find(l => normalizarTexto(l) === nombreLibro);
  if (libro) {
    if (libroActivo !== libro) {
      libroActivo = libro;
      renderizarGrillaCapitulos(libro);
    }
    if (cap && bibliaActual[libro] && bibliaActual[libro][cap - 1]) {
      capituloActivo = cap - 1;
      // Resaltar capítulo
      elementos.grillaCapitulos.querySelectorAll('button').forEach((btn, idx) => {
        btn.classList.toggle('selected', idx === capituloActivo);
      });
      cargarCapitulo(libro, capituloActivo);
      renderizarGrillaVersiculos();
      if (vers && bibliaActual[libro][cap - 1][vers - 1]) {
        versiculoActivoIndex = vers - 1;
        elementos.grillaVersiculos.querySelectorAll('button').forEach((btn, idx) => {
          btn.classList.toggle('selected', idx === versiculoActivoIndex);
        });
        resaltarCard(versiculoActivoIndex);
      } else {
        versiculoActivoIndex = -1;
        elementos.grillaVersiculos.querySelectorAll('button').forEach(btn => btn.classList.remove('selected'));
      }
    } else {
      capituloActivo = null;
      elementos.grillaCapitulos.querySelectorAll('button').forEach(btn => btn.classList.remove('selected'));
      elementos.grillaVersiculos.innerHTML = '';
    }
  } else {
    capituloActivo = null;
    elementos.grillaCapitulos.querySelectorAll('button').forEach(btn => btn.classList.remove('selected'));
    elementos.grillaVersiculos.innerHTML = '';
  }
}

/**
 * Muestra sugerencias de libros
 */
function mostrarSugerenciasLibros(libros = null) {
  elementos.sugerenciasLibros.innerHTML = '';
  if (!bibliaActual) return;
  const librosAMostrar = libros || Object.keys(bibliaActual).slice(0, 10);
  librosAMostrar.forEach((libro, idx) => {
    const div = document.createElement('div');
    div.textContent = libro;
    div.dataset.libro = libro;
    if (idx === libroSugeridoIndex) div.classList.add('selected');
    elementos.sugerenciasLibros.appendChild(div);
  });
  if (librosAMostrar.length > 0) {
    elementos.sugerenciasLibros.style.display = 'block';
    // Posicionar las sugerencias debajo del input
    const inputRect = elementos.buscarLibroInput.getBoundingClientRect();
    elementos.sugerenciasLibros.style.top = (inputRect.bottom + 5) + 'px';
    elementos.sugerenciasLibros.style.left = inputRect.left + 'px';
    // Asegurar resaltado visual correcto después de renderizar
    const sugerencias = Array.from(elementos.sugerenciasLibros.querySelectorAll('div'));
    sugerencias.forEach((div, idx) => {
      if (idx === libroSugeridoIndex) {
        div.classList.add('selected');
      } else {
        div.classList.remove('selected');
      }
    });
  } else {
    elementos.sugerenciasLibros.style.display = 'none';
  }
}

/**
 * Selecciona un libro
 */
function seleccionarLibro(event) {
  let target = event.target;
  // Permitir selección por teclado
  if (event.type === 'keydown' && event.selectedDiv) {
    target = event.selectedDiv;
  }
  if (target && target.dataset.libro) {
    const libro = target.dataset.libro;
    libroActivo = libro;
    elementos.buscarLibroInput.value = libro;
    elementos.sugerenciasLibros.style.display = 'none';
    renderizarGrillaCapitulos(libro);
    libroSugeridoIndex = -1;
    // Actualizar memoria
    actualizarMemoriaServidor({
      modo: 'biblia',
      biblia: { libro: libro, capitulo: null, versiculo: null }
    });
  }
}

/**
 * Renderiza la grilla de capítulos
 */
function renderizarGrillaCapitulos(libro) {
  elementos.grillaCapitulos.innerHTML = '';
  const capítulos = bibliaActual[libro];
  
  capítulos.forEach((capitulo, index) => {
    const button = document.createElement('button');
    button.textContent = index + 1;
    button.dataset.capitulo = index;
    elementos.grillaCapitulos.appendChild(button);
  });
  mostrarGrillasBiblia(true); // Expandir accordions al cambiar de libro
}

/**
 * Selecciona un capítulo
 */
function seleccionarCapitulo(event) {
  if (event.target.dataset.capitulo) {
    const capituloIndex = parseInt(event.target.dataset.capitulo);
    capituloActivo = capituloIndex;
    elementos.grillaCapitulos.querySelectorAll('button').forEach(btn => {
      btn.classList.remove('selected');
    });
    event.target.classList.add('selected');
    cargarCapitulo(libroActivo, capituloIndex);
    renderizarGrillaVersiculos();
    mostrarGrillasBiblia(true);
    // Actualizar memoria
    actualizarMemoriaServidor({
      modo: 'biblia',
      biblia: { libro: libroActivo, capitulo: capituloIndex, versiculo: null }
    });
  }
}

/**
 * Carga un capítulo en la vista previa
 */
function cargarCapitulo(libro, capituloIndex) {
  elementos.vistaPrevia.innerHTML = '';
  // Crear el div de referencia vacío (se llenará con la función)
  const referenciaDiv = document.createElement('div');
  referenciaDiv.className = 'referencia-biblia';
  elementos.vistaPrevia.appendChild(referenciaDiv);

  const capítulo = bibliaActual[libro][capituloIndex];
  capítulo.forEach((versiculo, index) => {
    const card = document.createElement('div');
    card.className = 'card';
    card.dataset.versiculo = index;
    card.innerHTML = `<strong>${versiculo.verse}</strong> ${versiculo.text}`;
    elementos.vistaPrevia.appendChild(card);
  });
  actualizarReferenciaBibliaEnVistaPrevia();
  actualizarVistaProyector();
}

/**
 * Renderiza la grilla de versículos
 */
function renderizarGrillaVersiculos() {
  elementos.grillaVersiculos.innerHTML = '';
  const capítulo = bibliaActual[libroActivo][capituloActivo];
  
  capítulo.forEach((versiculo, index) => {
    const button = document.createElement('button');
    button.textContent = versiculo.verse;
    button.dataset.versiculo = index;
    elementos.grillaVersiculos.appendChild(button);
  });
}

/**
 * Selecciona un versículo
 */
function seleccionarVersiculo(event) {
  if (event.target.dataset.versiculo) {
    const versiculoIndex = parseInt(event.target.dataset.versiculo);
    versiculoActivoIndex = versiculoIndex;
    elementos.grillaVersiculos.querySelectorAll('button').forEach(btn => {
      btn.classList.remove('selected');
    });
    event.target.classList.add('selected');
    resaltarCard(versiculoIndex);
    actualizarReferenciaBibliaEnVistaPrevia();
    enviarVersiculoAlProyector(versiculoIndex);
    actualizarVistaProyector();
    mostrarGrillasBiblia(false);
    // Actualizar memoria
    actualizarMemoriaServidor({
      modo: 'biblia',
      biblia: { libro: libroActivo, capitulo: capituloActivo, versiculo: versiculoIndex }
    });
  }
}

/**
 * Filtra himnos según el texto ingresado
 */
function filtrarHimnos() {
  const texto = elementos.buscarHimnoInput.value;
  const textoNormalizado = normalizarTexto(texto.toLowerCase());
  if (!textoNormalizado) {
    elementos.listaHimnos.innerHTML = '';
    elementos.listaHimnos.style.display = 'none';
    return;
  }
  // Buscar en número, título y archivo, todos normalizados
  const resultados = indiceHimnos.filter(himno => {
    const numero = normalizarTexto((himno.number || ''));
    const titulo = normalizarTexto((himno.title || ''));
    const file = normalizarTexto((himno.file || ''));
    return numero.includes(textoNormalizado) || titulo.includes(textoNormalizado) || file.includes(textoNormalizado);
  });
  himnoSugeridoIndex = -1; // Reiniciar selección al filtrar
  mostrarListaHimnos(resultados);
}

/**
 * Muestra la lista de himnos filtrados
 */
function mostrarListaHimnos(himnos) {
  elementos.listaHimnos.innerHTML = '';
  // Mostrar solo los primeros 20 resultados
  himnos.slice(0, 20).forEach((himno, idx) => {
    const div = document.createElement('div');
    div.textContent = `${himno.number} - ${himno.title}`;
    div.dataset.himno = himno.file;
    if (idx === himnoSugeridoIndex) div.classList.add('selected');
    elementos.listaHimnos.appendChild(div);
  });
  if (himnos.length > 0) {
    elementos.listaHimnos.style.display = 'block';
  } else {
    elementos.listaHimnos.style.display = 'none';
  }
}

/**
 * Selecciona un himno
 */
async function seleccionarHimno(event) {
  let target = event.target;
  // Permitir selección por teclado
  if (event.type === 'keydown' && event.selectedDiv) {
    target = event.selectedDiv;
  }
  if (target && target.dataset.himno) {
    const himnoFile = target.dataset.himno;
    try {
      himnoActivo = await parseHymn(himnoFile);
      if (himnoActivo) {
        const tituloLimpio = himnoActivo.titulo;
        elementos.buscarHimnoInput.value = `${himnoActivo.numero} - ${tituloLimpio}`;
        elementos.listaHimnos.style.display = 'none';
        himnoSugeridoIndex = -1;
        cargarHimnoEnVistaPrevia();
        enviarEstrofaAlProyector(0);
        // Actualizar memoria
        actualizarMemoriaServidor({
          modo: 'himnario',
          himnario: { numero: himnoActivo.numero, titulo: tituloLimpio, estrofa: 0 }
        });
      }
    } catch (error) {
      console.error('Error al cargar himno:', error);
    }
  }
}

/**
 * Carga un himno en la vista previa
 */
function cargarHimnoEnVistaPrevia() {
  if (!himnoActivo) return;
  elementos.vistaPrevia.innerHTML = '';
  const tituloLimpio = himnoActivo.titulo;
  // Debug: Log para verificar el título
  console.log('🔍 Debug título (cargarHimnoEnVistaPrevia):', {
    tituloLimpio: tituloLimpio,
    numero: himnoActivo.numero
  });
  himnoActivo.estrofas.forEach((estrofa, index) => {
    const card = document.createElement('div');
    card.className = 'card';
    card.dataset.estrofa = index;
    if (index === 0) {
      card.innerHTML = `<strong>${himnoActivo.numero} | ${tituloLimpio}</strong>`;
    } else {
      const versoText = estrofa.verso === 'coro' ? 'Coro' : `Verso ${estrofa.verso}`;
      card.innerHTML = `<strong>${versoText}</strong><br>${estrofa.texto}`;
    }
    elementos.vistaPrevia.appendChild(card);
  });
  estrofaActivaIndex = 0;
  resaltarCard(0);
  actualizarBotonPlayHimno();
  actualizarVistaProyector();
}

/**
 * Maneja el clic en una card de estrofa/versículo
 */
function manejarClicCard(event) {
  const card = event.target.closest('.card'); // Corrección
  if (!card) return; // Añadir esta guarda
  const esBiblia = esModoBiblia();
  // Determinar el índice según el modo
  if (esBiblia) {
    const versiculoIndex = parseInt(card.dataset.versiculo);
    versiculoActivoIndex = versiculoIndex;
    resaltarCard(versiculoIndex);
    actualizarReferenciaBibliaEnVistaPrevia();
    enviarVersiculoAlProyector(versiculoIndex);
    actualizarVistaProyector();
    // Actualizar memoria
    actualizarMemoriaServidor({
      modo: 'biblia',
      biblia: { libro: libroActivo, capitulo: capituloActivo, versiculo: versiculoIndex }
    });
  } else {
    const estrofaIndex = parseInt(card.dataset.estrofa);
    estrofaActivaIndex = estrofaIndex;
    resaltarCard(estrofaIndex);
    enviarEstrofaAlProyector(estrofaIndex);
    actualizarVistaProyector();
    // Actualizar memoria
    if (himnoActivo) {
      actualizarMemoriaServidor({
        modo: 'himnario',
        himnario: { numero: himnoActivo.numero, titulo: himnoActivo.titulo, estrofa: estrofaIndex }
      });
    }
  }
}

/**
 * Actualiza el botón de play del himno
 */
function actualizarBotonPlayHimno() {
  const playHimnoFooter = document.getElementById('playHimnoFooter');
  if (!himnoActivo || esModoBiblia()) {
    if (playHimnoFooter) playHimnoFooter.style.display = 'none';
    actualizarBotonPlayMiniProyector();
    return;
  }
  // Solo mostrar si NO es modo Biblia
  if (playHimnoFooter) {
    playHimnoFooter.style.display = 'block';
    // Actualizar el estado del botón según si está sonando o no
    const icono = playHimnoFooter.querySelector('i');
    if (himnoSonando) {
      icono.className = 'fa-solid fa-stop';
      playHimnoFooter.classList.add('playing');
    } else {
      icono.className = 'fa-solid fa-play';
      playHimnoFooter.classList.remove('playing');
    }
  }
  actualizarBotonPlayMiniProyector();
}

/**
 * Construye la ruta del archivo de audio
 */
function construirRutaAudio(numeroFormateado, titulo) {
  const tituloNormalizado = titulo.toLowerCase()
    .replace(/[^a-z0-9]/g, ' ')
    .trim()
    .replace(/\s+/g, ' ');
  
  return `/src/assets/himnos/musica/${audioMode}/${numeroFormateado}.mp3`;
}

/**
 * Reproduce o detiene un himno
 */
async function reproducirHimno() {
  if (!himnoActivo) return;
  
  if (himnoSonando) {
    // Si está sonando, detener con fadeout
    console.log('⏹️ Deteniendo himno con fadeout...');
    
    // Enviar comando de detención al proyector (PC)
    enviarMensajeProyector('detenerAudio', {
      fadeout: true,
      duracion: 2000 // 2 segundos de fadeout
    });
    
    himnoSonando = false;
    
    // Cambiar el estado del botón
    const playHimnoFooter = document.getElementById('playHimnoFooter');
    if (playHimnoFooter) {
      const icono = playHimnoFooter.querySelector('i');
      icono.className = 'fa-solid fa-play';
      playHimnoFooter.classList.remove('playing');
    }
    
    console.log('✅ Comando de detención enviado al proyector');
    
  } else {
    // Si no está sonando, reproducir
    const numeroFormateado = himnoActivo.numero.padStart(3, '0');
    const rutaAudio = construirRutaAudio(numeroFormateado, himnoActivo.titulo);
    
    try {
      console.log('🎵 Reproduciendo himno:', {
        numero: himnoActivo.numero,
        titulo: himnoActivo.titulo,
        ruta: rutaAudio
      });
      
      // Enviar comando de reproducción al proyector (PC)
      enviarMensajeProyector('reproducirAudio', {
        ruta: rutaAudio,
        himno: himnoActivo.numero,
        titulo: himnoActivo.titulo
      });
      
      // NO reproducir en el panel de control (celular)
      // El audio solo debe reproducirse en la PC
      
      himnoSonando = true;
      
      // Cambiar el estado del botón
      const playHimnoFooter = document.getElementById('playHimnoFooter');
      if (playHimnoFooter) {
        const icono = playHimnoFooter.querySelector('i');
        icono.className = 'fa-solid fa-stop';
        playHimnoFooter.classList.add('playing');
      }
      
      console.log('✅ Comando de reproducción enviado al proyector');
      
    } catch (error) {
      console.error('❌ Error al reproducir himno:', error);
    }
  }
  actualizarBotonPlayMiniProyector();
}

/**
 * Navega entre estrofas/versículos
 */
function navegar(direccion) {
  if (esModoBiblia()) {
    if (!bibliaActual || !libroActivo || capituloActivo === null || versiculoActivoIndex < 0) return;
    const capítulo = bibliaActual[libroActivo][capituloActivo];
    const totalVersiculos = capítulo.length;
    versiculoActivoIndex += direccion;
    if (versiculoActivoIndex < 0) {
      versiculoActivoIndex = totalVersiculos - 1;
    } else if (versiculoActivoIndex >= totalVersiculos) {
      versiculoActivoIndex = 0;
    }
    resaltarCard(versiculoActivoIndex);
    actualizarReferenciaBibliaEnVistaPrevia();
    enviarVersiculoAlProyector(versiculoActivoIndex);
    // Actualizar memoria
    actualizarMemoriaServidor({
      modo: 'biblia',
      biblia: { libro: libroActivo, capitulo: capituloActivo, versiculo: versiculoActivoIndex }
    });
  } else {
    if (!himnoActivo || estrofaActivaIndex < 0) return;
    const totalEstrofas = himnoActivo.estrofas.length;
    estrofaActivaIndex += direccion;
    if (estrofaActivaIndex < 0) {
      estrofaActivaIndex = totalEstrofas - 1;
    } else if (estrofaActivaIndex >= totalEstrofas) {
      estrofaActivaIndex = 0;
    }
    const cards = document.querySelectorAll('.card');
    cards.forEach((card, index) => {
      card.classList.toggle('selected', index === estrofaActivaIndex);
    });
    enviarEstrofaAlProyector(estrofaActivaIndex);
    // Actualizar memoria
    actualizarMemoriaServidor({
      modo: 'himnario',
      himnario: { numero: himnoActivo.numero, titulo: himnoActivo.titulo, estrofa: estrofaActivaIndex }
    });
  }
  actualizarVistaProyector();
}

/**
 * Resalta un versículo en la vista previa
 */
function resaltarCard(versiculoIndex) {
  const cards = document.querySelectorAll('.card');
  cards.forEach((card, index) => {
    if (index === versiculoIndex) {
      card.classList.add('selected');
    } else {
      card.classList.remove('selected');
    }
  });
  // --- NUEVO: Resaltar también el botón de versículo en la grilla ---
  if (esModoBiblia()) {
    const botonesVersiculos = elementos.grillaVersiculos.querySelectorAll('button');
    botonesVersiculos.forEach((btn, idx) => {
      btn.classList.toggle('selected', idx === versiculoIndex);
    });
    // Resaltar capítulo si corresponde
    if (capituloActivo !== null) {
      const botonesCapitulos = elementos.grillaCapitulos.querySelectorAll('button');
      botonesCapitulos.forEach((btn, idx) => {
        btn.classList.toggle('selected', idx === capituloActivo);
      });
    }
  }
}

/**
 * Limpia la vista previa
 */
function limpiarVistaPrevia() {
  console.log('🧹 Limpiando vista previa...');
  elementos.vistaPrevia.innerHTML = '';
  versiculoActivoIndex = -1;
  estrofaActivaIndex = -1;
  himnoActivo = null;
  libroActivo = null;
  capituloActivo = null;
  ocultarPlayFooter();
  actualizarVistaProyector();
}

/**
 * Limpia las grillas de capítulos y versículos
 */
function limpiarGrillas() {
  console.log('🧹 Limpiando grillas...');
  elementos.grillaCapitulos.innerHTML = '';
  elementos.grillaVersiculos.innerHTML = '';
  capituloActivo = null;
  versiculoActivoIndex = -1;
}

/**
 * Oculta el footer de reproducción del himno
 */
function ocultarPlayFooter(forceHide = false) {
  const playHimnoFooter = document.getElementById('playHimnoFooter');
  if (playHimnoFooter) {
    playHimnoFooter.style.display = forceHide ? 'none' : 'none';
  }
}

/**
 * Limpia el texto del proyector
 */
function limpiarProyector() {
  console.log('🧹 Limpiando proyector...');
  enviarMensajeProyector('update_text', {
    texto: '',
    ref: '',
    soloReferencia: false
  });
}

/**
 * Limpia los campos de búsqueda
 */
function limpiarCamposBusqueda() {
  console.log('🧹 Limpiando campos de búsqueda...');
  if (elementos.buscarLibroInput) {
    elementos.buscarLibroInput.value = '';
  }
  if (elementos.buscarHimnoInput) {
    elementos.buscarHimnoInput.value = '';
  }
  if (elementos.sugerenciasLibros) {
    elementos.sugerenciasLibros.style.display = 'none';
  }
  if (elementos.listaHimnos) {
    elementos.listaHimnos.style.display = 'none';
  }
}

/**
 * Normaliza el texto para comparaciones
 */
function normalizarTexto(texto) {
  return texto.normalize('NFD').replace(/[\u0300-\u036f]/g, '').toLowerCase();
}

/**
 * Inicializa el modo de audio
 */
function inicializarAudioMode() {
  // Implementa la inicialización del modo de audio
}

/**
 * Maneja teclas de navegación en sugerencias de libros
 */
function manejarTeclasSugerenciasLibros(event) {
  if (["ArrowUp", "ArrowDown", "Enter"].includes(event.key)) {
    const sugerencias = document.querySelectorAll('#sugerenciasLibros div');
    let index = Array.from(sugerencias).findIndex(div => div.classList.contains('selected'));
    
    if (event.key === "ArrowUp") {
      index = (index - 1 + sugerencias.length) % sugerencias.length;
    } else if (event.key === "ArrowDown") {
      index = (index + 1) % sugerencias.length;
    } else if (event.key === "Enter") {
      const selectedDiv = sugerencias[index];
      if (selectedDiv) {
        // Nuevo: poner el texto del sugerido en el input
        elementos.buscarLibroInput.value = selectedDiv.textContent;
        seleccionarLibro({ type: 'click', selectedDiv });
        // También ocultar sugerencias
        elementos.sugerenciasLibros.style.display = 'none';
        // Evitar el submit del formulario si lo hubiera
        event.preventDefault();
        return;
      }
    }
    
    sugerencias.forEach((div, idx) => {
      div.classList.toggle('selected', idx === index);
    });
  }
}

/**
 * Maneja teclas de navegación en lista de himnos
 */
function manejarTeclasListaHimnos(event) {
  if (["ArrowUp", "ArrowDown", "Enter"].includes(event.key)) {
    const himnos = document.querySelectorAll('#listaHimnos div');
    let index = Array.from(himnos).findIndex(div => div.classList.contains('selected'));
    
    if (event.key === "ArrowUp") {
      index = (index - 1 + himnos.length) % himnos.length;
    } else if (event.key === "ArrowDown") {
      index = (index + 1) % himnos.length;
    } else if (event.key === "Enter") {
      const selectedDiv = himnos[index];
      if (selectedDiv) {
        // Nuevo: poner el texto del sugerido en el input
        elementos.buscarHimnoInput.value = selectedDiv.textContent;
        seleccionarHimno({ type: 'click', target: selectedDiv });
        // También ocultar lista
        elementos.listaHimnos.style.display = 'none';
        event.preventDefault();
        return;
      }
    }
    
    himnos.forEach((div, idx) => {
      div.classList.toggle('selected', idx === index);
    });
  }
}

/**
 * Alterna entre la vista lista y la vista tipo proyector
 */
function alternarVistaPrevisualizacion() {
  const botonera = document.getElementById('botoneraNavegacion');
  const playMini = document.getElementById('playHimnoMiniProyector');
  if (vistaActual === 'lista') {
    vistaActual = 'proyector';
    if (vistaPrevia) vistaPrevia.style.display = 'none';
    if (vistaProyector) vistaProyector.style.display = 'flex';
    if (botonera) botonera.style.display = 'none';
    // Mostrar botón play/stop solo si es himnario
    if (playMini) playMini.style.display = (!esModoBiblia() ? 'block' : 'none');
    actualizarVistaProyector();
    if (btnCambiarVista) {
      const icono = btnCambiarVista.querySelector('i');
      const texto = btnCambiarVista.querySelector('span');
      if (icono) {
        icono.className = 'fa-solid fa-list';
      }
      if (texto) {
        texto.textContent = 'Lista';
      }
    }
  } else {
    vistaActual = 'lista';
    if (vistaPrevia) vistaPrevia.style.display = 'block';
    if (vistaProyector) vistaProyector.style.display = 'none';
    if (botonera) botonera.style.display = 'flex';
    if (playMini) playMini.style.display = 'none';
    if (btnCambiarVista) {
      const icono = btnCambiarVista.querySelector('i');
      const texto = btnCambiarVista.querySelector('span');
      if (icono) {
        icono.className = 'fa-solid fa-expand';
      }
      if (texto) {
        texto.textContent = 'Proyector';
      }
    }
  }
  actualizarTopBarTitulo();
  actualizarBotonPlayMiniProyector();
  if (esModoBiblia()) ocultarPlayFooter();
  // Refuerzo: actualizar el botón de play del himno
  actualizarBotonPlayHimno();
}

/**
 * Actualiza el contenido de la vista tipo proyector
 */
function actualizarVistaProyector() {
  if (!proyectorPreviewContent) return;
  let texto = '';
  let referencia = '';
  let isBiblia = esModoBiblia();
  const miniProyectorTituloHimno = document.getElementById('miniProyectorTituloHimno');
  const miniProyectorContador = document.getElementById('miniProyectorContador');
  const miniProyectorContainer = document.getElementById('vistaProyector');
  if (miniProyectorContainer) {
    miniProyectorContainer.classList.remove('modo-biblia', 'modo-himno');
    miniProyectorContainer.classList.add(isBiblia ? 'modo-biblia' : 'modo-himno');
  }
  if (miniProyectorTituloHimno) miniProyectorTituloHimno.style.display = 'none';
  if (miniProyectorContador) miniProyectorContador.style.display = 'none';
  if (isBiblia) {
    if (bibliaActual && libroActivo && capituloActivo !== null && versiculoActivoIndex >= 0) {
      const versiculo = bibliaActual[libroActivo][capituloActivo][versiculoActivoIndex];
      referencia = `${libroActivo} ${capituloActivo + 1}:${versiculo.verse}`;
      texto = versiculo.text;
    } else {
      referencia = '';
      texto = '<span style="color:#ffd700;">Selecciona un versículo</span>';
    }
    if (miniProyectorVideo) {
      if (miniProyectorVideo.src.indexOf('verso-bg.mp4') === -1) {
        miniProyectorVideo.src = '/src/assets/videos/verso-bg.mp4';
      }
    }
  } else {
    if (himnoActivo && estrofaActivaIndex >= 0) {
      const estrofa = himnoActivo.estrofas[estrofaActivaIndex];
      const totalVerses = himnoActivo.verses ? parseInt(himnoActivo.verses, 10) : undefined;
      if (estrofaActivaIndex === 0) {
        if (miniProyectorTituloHimno) {
          const numeroSinCeros = String(parseInt(himnoActivo.numero, 10));
          miniProyectorTituloHimno.textContent = `${numeroSinCeros} - ${himnoActivo.titulo}`;
          miniProyectorTituloHimno.style.display = 'block';
        }
        const numeroSinCeros = String(parseInt(himnoActivo.numero, 10));
        texto = `${numeroSinCeros} | ${himnoActivo.titulo}`;
      } else {
        if (miniProyectorTituloHimno) {
          const numeroSinCeros = String(parseInt(himnoActivo.numero, 10));
          miniProyectorTituloHimno.textContent = `${numeroSinCeros} - ${himnoActivo.titulo}`;
          miniProyectorTituloHimno.style.display = 'block';
        }
        if (miniProyectorContador) {
          miniProyectorContador.textContent = `${estrofaActivaIndex}/${himnoActivo.estrofas.length - 1}`;
          miniProyectorContador.style.display = 'block';
        }
        let versoText = '';
        if (typeof estrofa.verse !== 'undefined' && totalVerses) {
          versoText = estrofa.verso === 'coro' ? 'Coro' : `Verso ${estrofa.verse} de ${totalVerses}`;
        } else {
          versoText = estrofa.verso === 'coro' ? 'Coro' : `Verso ${estrofa.verso}`;
        }
        texto = estrofa.texto.replace(/\n/g, '<br>');
        proyectorPreviewContent.innerHTML = `
          <div class="indicador-estrofa" style="font-size:2.5vw;font-weight:bold;color:#fff;text-shadow:0 2px 8px #000;margin-bottom:1em;">${versoText + " de " + totalVerses}</div>
          <span>${texto}</span>
        `;
        return;
      }
    } else {
      texto = '<span style="color:#ffd700;">Selecciona un himno</span>';
    }
    if (miniProyectorVideo) {
      if (miniProyectorVideo.src.indexOf('himno-bg.mp4') === -1) {
        miniProyectorVideo.src = '/src/assets/videos/himno-bg.mp4';
      }
    }
  }
  proyectorPreviewContent.innerHTML = (referencia ? `<span class='referencia'>${referencia}</span>` : '') + `<span>${texto}</span>`;
}

/**
 * Actualiza el título de la barra superior según el modo y la vista
 */
function actualizarTopBarTitulo() {
  if (!topBarTitulo) return;
  let modo = esModoBiblia() ? 'Biblia' : 'Himnario';
  if (vistaActual === 'proyector') {
    topBarTitulo.textContent = `${modo} (Proyector)`;
  } else {
    topBarTitulo.textContent = modo;
  }
}

function actualizarBotonPlayMiniProyector() {
  const playMini = document.getElementById('playHimnoMiniProyector');
  if (!playMini) return;
  // Refuerzo: SIEMPRE ocultar en modo Biblia
  if (esModoBiblia()) {
    playMini.style.display = 'none';
    return;
  }
  // Solo mostrar en modo Himnario y si hay himno activo
  const debeMostrar = (himnoActivo && (
    vistaActual === 'proyector' || modoPantallaCompleta || document.body.classList.contains('auto-fullscreen-landscape')
  ));
  if (debeMostrar) {
    playMini.style.display = 'block';
    const icono = playMini.querySelector('i');
    if (himnoSonando) {
      icono.className = 'fa-solid fa-stop';
      playMini.classList.add('playing');
    } else {
      icono.className = 'fa-solid fa-play';
      playMini.classList.remove('playing');
    }
  } else {
    playMini.style.display = 'none';
  }
}

function ajustarRelacionAspectoMiniProyector() {
  if (miniProyectorContainer) {
    miniProyectorContainer.style.aspectRatio = miniProyectorAspect;
    // Fallback para navegadores sin aspect-ratio
    if (!('aspectRatio' in document.body.style)) {
      // fallback: height = width / aspect
      const width = miniProyectorContainer.offsetWidth;
      miniProyectorContainer.style.height = (width / miniProyectorAspect) + 'px';
    } else {
      miniProyectorContainer.style.height = '';
    }
  }
}

/**
 * Alterna entre modo normal y pantalla completa
 */
function alternarPantallaCompleta() {
  modoPantallaCompleta = !modoPantallaCompleta;
  
  if (modoPantallaCompleta) {
    document.body.classList.add('fullscreen-mode');
    document.body.classList.remove('auto-fullscreen-landscape');
    const btnFullscreenMini = document.getElementById('btnFullscreenMini');
    if (btnFullscreenMini) {
      const icono = btnFullscreenMini.querySelector('i');
      if (icono) {
        icono.className = 'fa-solid fa-compress';
      }
      btnFullscreenMini.title = 'Salir de pantalla completa';
    }
    console.log('🖥️ Modo pantalla completa activado');
  } else {
    document.body.classList.remove('fullscreen-mode');
    const btnFullscreenMini = document.getElementById('btnFullscreenMini');
    if (btnFullscreenMini) {
      const icono = btnFullscreenMini.querySelector('i');
      if (icono) {
        icono.className = 'fa-solid fa-expand';
      }
      btnFullscreenMini.title = 'Pantalla completa';
    }
    if (autoFullscreenLandscape && esDispositivoMovil() && window.innerWidth > window.innerHeight) {
      document.body.classList.add('auto-fullscreen-landscape');
    }
    console.log('📱 Modo pantalla completa desactivado');
  }
  // Actualizar botón de play SIEMPRE después de cambiar pantalla completa
  actualizarBotonPlayMiniProyector();
  ocultarPlayFooter();
  if (esModoBiblia()) ocultarPlayFooter();
  // Refuerzo: actualizar el botón de play del himno
  actualizarBotonPlayHimno();
}

/**
 * Maneja el cambio de orientación del dispositivo
 */
function manejarCambioOrientacion() {
  if (!autoFullscreenLandscape) return;
  
  const esLandscape = window.innerWidth > window.innerHeight;
  const esMovil = esDispositivoMovil();
  
  if (esMovil && esLandscape && !modoPantallaCompleta) {
    // Activar auto-fullscreen landscape
    document.body.classList.add('auto-fullscreen-landscape');
    console.log('🔄 Auto-fullscreen landscape activado');
  } else if (esMovil && !esLandscape) {
    // Desactivar auto-fullscreen landscape
    document.body.classList.remove('auto-fullscreen-landscape');
    console.log('🔄 Auto-fullscreen landscape desactivado');
  }
  
  // Actualizar botón de play
  actualizarBotonPlayMiniProyector();
}

/**
 * Habilita o deshabilita el auto-fullscreen landscape
 */
function toggleAutoFullscreenLandscape() {
  autoFullscreenLandscape = !autoFullscreenLandscape;
  
  if (!autoFullscreenLandscape) {
    document.body.classList.remove('auto-fullscreen-landscape');
  } else {
    // Verificar si debe aplicar ahora
    manejarCambioOrientacion();
  }
  
  console.log('🔄 Auto-fullscreen landscape:', autoFullscreenLandscape ? 'habilitado' : 'deshabilitado');
}

// Llamar también al hacer resize en el panel de control
window.addEventListener('resize', ajustarRelacionAspectoMiniProyector);

// Escuchar eventos de sincronización de proyector
// Elimina el bloque duplicado de listeners de socket para proyectorAbierto/proyectorCerrado si existe fuera de inicializarSocketIO

// Hacer las funciones disponibles globalmente
window.cambiarModoGlobal = cambiarModoGlobal;
window.alternarPantallaCompleta = alternarPantallaCompleta;
window.toggleAutoFullscreenLandscape = toggleAutoFullscreenLandscape;

// --- INICIO: Identificador único de cliente para sincronización de memoria ---
function obtenerClientId() {
  let clientId = localStorage.getItem('clientId');
  if (!clientId) {
    clientId = 'cli_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();
    localStorage.setItem('clientId', clientId);
  }
  return clientId;
}
const CLIENT_ID = obtenerClientId();
// --- FIN ---

// Inicializar la aplicación cuando el DOM esté listo
console.log('📋 DOM cargado, iniciando aplicación...');
document.addEventListener('DOMContentLoaded', () => {
  console.log('🎯 DOMContentLoaded disparado, llamando a inicializar()...');
  inicializar().then(() => {
    if (vistaPrevia) vistaPrevia.style.display = 'none';
    if (vistaProyector) vistaProyector.style.display = 'flex';
    vistaActual = 'proyector';
    actualizarTopBarTitulo();
    const botonera = document.getElementById('botoneraNavegacion');
    if (botonera) botonera.style.display = 'none';
    const playMini = document.getElementById('playHimnoMiniProyector');
    if (playMini) {
      playMini.addEventListener('click', () => {
        reproducirHimno();
        actualizarBotonPlayMiniProyector();
      });
    }
    actualizarVistaProyector();
    actualizarBotonPlayMiniProyector();
    actualizarVisibilidadBotonProyector();
  }).catch(error => {
    console.error('❌ Error al inicializar la aplicación:', error);
  });
  
  // Inicializar manejo de orientación
  setTimeout(() => {
    manejarCambioOrientacion();
  }, 1000);
});

function actualizarVisibilidadBotonProyector() {
  const boton = document.getElementById('abrirProyector');
  const body = document.body;
  if (!boton) return;
  if (proyectorWindow && !proyectorWindow.closed && proyectorPendienteClick) {
    boton.classList.add('proyector-abierto');
    boton.classList.remove('proyector-normal');
    boton.style.display = '';
    boton.textContent = 'No olvides hacer click en el proyector';
    boton.style.pointerEvents = 'none';
    boton.style.cursor = 'not-allowed';
    body.classList.add('con-boton-proyector');
  } else if (proyectorWindow && !proyectorWindow.closed && !proyectorPendienteClick) {
    boton.classList.remove('proyector-abierto');
    boton.classList.add('proyector-normal');
    boton.style.display = '';
    boton.textContent = 'Abrir Ventana de Proyección';
    boton.style.pointerEvents = '';
    boton.style.cursor = '';
    body.classList.remove('con-boton-proyector');
  } else {
    boton.classList.remove('proyector-abierto');
    boton.classList.add('proyector-normal');
    boton.style.display = '';
    boton.textContent = 'Abrir Ventana de Proyección';
    boton.style.pointerEvents = '';
    boton.style.cursor = '';
    body.classList.add('con-boton-proyector');
  }
}

// Función para mostrar/ocultar grillas de capítulos y versículos (accordion)
function mostrarGrillasBiblia(mostrar) {
  const contentCap = document.getElementById('contentCapitulos');
  const contentVers = document.getElementById('contentVersiculos');
  if (contentCap) contentCap.classList.toggle('collapsed', !mostrar);
  if (contentVers) contentVers.classList.toggle('collapsed', !mostrar);
}

// Lógica de accordions para capítulos y versículos
function inicializarAccordionsBiblia() {
  const headerCap = document.getElementById('headerCapitulos');
  const contentCap = document.getElementById('contentCapitulos');
  const headerVers = document.getElementById('headerVersiculos');
  const contentVers = document.getElementById('contentVersiculos');

  if (headerCap && contentCap) {
    headerCap.addEventListener('click', () => {
      contentCap.classList.toggle('collapsed');
    });
  }
  if (headerVers && contentVers) {
    headerVers.addEventListener('click', () => {
      contentVers.classList.toggle('collapsed');
    });
  }
}

// Nueva función para actualizar la referencia en la vista previa
function actualizarReferenciaBibliaEnVistaPrevia() {
  // Buscar el div de referencia
  let referenciaDiv = elementos.vistaPrevia.querySelector('.referencia-biblia');
  if (!referenciaDiv) {
    referenciaDiv = document.createElement('div');
    referenciaDiv.className = 'referencia-biblia';
    elementos.vistaPrevia.prepend(referenciaDiv);
  }
  if (!bibliaActual || !libroActivo || capituloActivo === null) {
    referenciaDiv.textContent = '';
    return;
  }
  let referenciaTexto = `${libroActivo} ${capituloActivo + 1}`;
  if (typeof versiculoActivoIndex === 'number' && versiculoActivoIndex >= 0 && bibliaActual[libroActivo][capituloActivo][versiculoActivoIndex]) {
    const versiculo = bibliaActual[libroActivo][capituloActivo][versiculoActivoIndex];
    referenciaTexto = `${libroActivo} ${capituloActivo + 1}:${versiculo.verse}`;
  }
  referenciaDiv.textContent = referenciaTexto;
}

// --- Clear buttons para inputs de búsqueda ---
function toggleClearBtn(input, btn) {
  if (input.value.length > 0) {
    btn.style.display = 'flex';
  } else {
    btn.style.display = 'none';
  }
}
if (elementos.buscarLibroInput && elementos.clearBuscarLibro) {
  elementos.buscarLibroInput.addEventListener('input', function() {
    toggleClearBtn(elementos.buscarLibroInput, elementos.clearBuscarLibro);
  });
  elementos.clearBuscarLibro.addEventListener('click', function() {
    elementos.buscarLibroInput.value = '';
    elementos.clearBuscarLibro.style.display = 'none';
    elementos.sugerenciasLibros.style.display = 'none';
    limpiarGrillas();
  });
  // Inicializar visibilidad
  toggleClearBtn(elementos.buscarLibroInput, elementos.clearBuscarLibro);
}
if (elementos.buscarHimnoInput && elementos.clearBuscarHimno) {
  elementos.buscarHimnoInput.addEventListener('input', function() {
    toggleClearBtn(elementos.buscarHimnoInput, elementos.clearBuscarHimno);
  });
  elementos.clearBuscarHimno.addEventListener('click', function() {
    elementos.buscarHimnoInput.value = '';
    elementos.clearBuscarHimno.style.display = 'none';
    elementos.listaHimnos.style.display = 'none';
  });
  // Inicializar visibilidad
  toggleClearBtn(elementos.buscarHimnoInput, elementos.clearBuscarHimno);
}

document.addEventListener('DOMContentLoaded', function() {
  // --- Limpiar libro ---
  const buscarLibroInput = document.getElementById('buscarLibroInput');
  const clearBuscarLibro = document.getElementById('clearBuscarLibro');
  if (buscarLibroInput && clearBuscarLibro) {
    buscarLibroInput.addEventListener('input', function() {
      clearBuscarLibro.style.display = buscarLibroInput.value.length > 0 ? 'flex' : 'none';
    });
    clearBuscarLibro.addEventListener('click', function(e) {
      buscarLibroInput.value = '';
      clearBuscarLibro.style.display = 'none';
      const sugerenciasLibros = document.getElementById('sugerenciasLibros');
      if (sugerenciasLibros) sugerenciasLibros.style.display = 'none';
      if (typeof limpiarGrillas === 'function') limpiarGrillas();
      buscarLibroInput.focus();
      e.preventDefault();
      e.stopPropagation();
    });
    // Inicializar visibilidad
    clearBuscarLibro.style.display = buscarLibroInput.value.length > 0 ? 'flex' : 'none';
  }

  // --- Limpiar himno ---
  const buscarHimnoInput = document.getElementById('buscarHimnoInput');
  const clearBuscarHimno = document.getElementById('clearBuscarHimno');
  if (buscarHimnoInput && clearBuscarHimno) {
    buscarHimnoInput.addEventListener('input', function() {
      clearBuscarHimno.style.display = buscarHimnoInput.value.length > 0 ? 'flex' : 'none';
    });
    clearBuscarHimno.addEventListener('click', function(e) {
      buscarHimnoInput.value = '';
      clearBuscarHimno.style.display = 'none';
      const listaHimnos = document.getElementById('listaHimnos');
      if (listaHimnos) listaHimnos.style.display = 'none';
      buscarHimnoInput.focus();
      e.preventDefault();
      e.stopPropagation();
    });
    // Inicializar visibilidad
    clearBuscarHimno.style.display = buscarHimnoInput.value.length > 0 ? 'flex' : 'none';
  }
});

// --- INICIO: Sincronización de memoria con el servidor ---
function solicitarMemoriaServidor() {
  if (window.socket) {
    window.socket.emit('get_memoria');
  }
}

function actualizarMemoriaServidor(nuevoEstado) {
  if (window.socket) {
    window.socket.emit('set_memoria', { ...nuevoEstado, clientId: CLIENT_ID });
  }
}

function aplicarMemoria(memoria) {
  if (!memoria) return;
  window.memoriaUltima = memoria;
  if (window.modoActual !== memoria.modo) {
    window.cambiarModoGlobal(memoria.modo, false);
    return;
  }
  if (memoria.modo === 'biblia' && memoria.biblia) {
    seleccionarEstadoBiblia(memoria.biblia);
  }
  if (memoria.modo === 'himnario' && memoria.himnario) {
    seleccionarEstadoHimnario(memoria.himnario);
  }
  actualizarVistaProyector();
  actualizarBotonPlayMiniProyector();
  actualizarReferenciaBibliaEnVistaPrevia();
}

function seleccionarEstadoBiblia(biblia) {
  if (!bibliaActual || !biblia.libro) return;
  libroActivo = biblia.libro;
  renderizarGrillaCapitulos(libroActivo);
  // --- Actualizar input de búsqueda ---
  if (elementos.buscarLibroInput) {
    let textoInput = biblia.libro;
    if (typeof biblia.capitulo === 'number' && biblia.capitulo >= 0) {
      textoInput += ' ' + (biblia.capitulo + 1);
      if (typeof biblia.versiculo === 'number' && biblia.versiculo >= 0) {
        textoInput += ' ' + (biblia.versiculo + 1);
      }
    }
    elementos.buscarLibroInput.value = textoInput;
  }
  if (typeof biblia.capitulo === 'number' && biblia.capitulo >= 0) {
    capituloActivo = biblia.capitulo;
    cargarCapitulo(libroActivo, capituloActivo);
    renderizarGrillaVersiculos();
    if (typeof biblia.versiculo === 'number' && biblia.versiculo >= 0) {
      versiculoActivoIndex = biblia.versiculo;
      resaltarCard(versiculoActivoIndex);
      actualizarReferenciaBibliaEnVistaPrevia();
      enviarVersiculoAlProyector(versiculoActivoIndex);
    }
  }
}

async function seleccionarEstadoHimnario(himnario) {
  if (!himnario.numero) return;
  // Buscar el archivo del himno en el índice
  const himno = indiceHimnos.find(h => h.number === himnario.numero);
  if (himno) {
    himnoActivo = await parseHymn(himno.file);
    if (himnoActivo) {
      // --- Actualizar input de búsqueda ---
      if (elementos.buscarHimnoInput) {
        elementos.buscarHimnoInput.value = `${himnoActivo.numero} - ${himnoActivo.titulo}`;
      }
      cargarHimnoEnVistaPrevia();
      if (typeof himnario.estrofa === 'number' && himnario.estrofa >= 0) {
        estrofaActivaIndex = himnario.estrofa;
        resaltarCard(estrofaActivaIndex);
        enviarEstrofaAlProyector(estrofaActivaIndex);
      }
      // --- Forzar actualización del mini proyector con la estrofa activa ---
      actualizarVistaProyector();
    }
  }
}

// Al conectar, pedir memoria
if (typeof io !== 'undefined') {
  document.addEventListener('DOMContentLoaded', function() {
    if (window.socket) {
      window.socket.on('memoria_estado', aplicarMemoria);
      window.socket.on('memoria_actualizada', function(payload) {
        // payload puede ser { memoria, clientId }
        let memoria = payload;
        let fromClientId = null;
        if (payload && typeof payload === 'object' && 'memoria' in payload) {
          memoria = payload.memoria;
          fromClientId = payload.clientId;
        } else if (payload && typeof payload === 'object' && 'clientId' in payload) {
          fromClientId = payload.clientId;
        }
        // Si el cambio es propio, ignorar
        if (fromClientId && fromClientId === CLIENT_ID) return;
        aplicarMemoria(memoria);
      });
      solicitarMemoriaServidor();
    }
  });
}
// --- FIN: Sincronización de memoria con el servidor ---



// church_display/src\js\proyector.js
// 1. Conectarse al servidor SocketIO
const socket = io();
const videoBg = document.getElementById('video-bg');
const textoPrincipal = document.getElementById('texto-principal');
const referencia = document.getElementById('referencia');
const contadorSeccion = document.getElementById('contador-seccion');
const indicadorEstrofa = document.getElementById('indicador-estrofa');

// Verificar que los elementos existen
console.log('🔍 Elementos del proyector:', {
    videoBg: !!videoBg,
    textoPrincipal: !!textoPrincipal,
    referencia: !!referencia,
    contadorSeccion: !!contadorSeccion,
    indicadorEstrofa: !!indicadorEstrofa
});

// Elemento de audio para reproducir himnos
let audioElement = null;

// 2. Eventos de conexión
socket.on('connect', () => {
    console.log('✅ Proyector conectado al servidor SocketIO - ID:', socket.id);
});

socket.on('disconnect', () => {
    console.log('❌ Proyector desconectado del servidor SocketIO');
});

// Agregar logging para todos los eventos recibidos
socket.onAny((eventName, ...args) => {
    console.log('📥 Evento recibido:', eventName, args);
});

// 3. Escuchar mensajes del panel de control
socket.on('update_text', (data) => {
    console.log('📥 Recibido update_text:', data);
    
    // Aplicar transición suave
    textoPrincipal.classList.add('fade-out');
    referencia.classList.add('fade-out');
    contadorSeccion.classList.remove('visible');
    indicadorEstrofa.classList.remove('visible');
    
    setTimeout(() => {
        // Determinar el modo y aplicar clases CSS correspondientes
        const contenido = document.getElementById('contenido');
        
        if (data.soloReferencia) {
            // Modo solo referencia (versículo)
            contenido.classList.remove('modo-himno');
            contenido.classList.add('modo-versiculo');
            
            textoPrincipal.innerHTML = data.texto;
            referencia.style.display = 'none';
            // Ocultar indicadores de himno
            contadorSeccion.style.display = 'none';
            indicadorEstrofa.style.display = 'none';
            // Quitar clase de versículo bíblico
            textoPrincipal.classList.remove('versiculo-biblia');
        } else {
            if (data.himnoData) {
                // Modo himno
                contenido.classList.remove('modo-versiculo');
                contenido.classList.add('modo-himno');
                
                textoPrincipal.innerHTML = data.texto;
                referencia.textContent = `Himno ${data.himnoData.numero} - ${data.himnoData.titulo}`;
                // Quitar clase de versículo bíblico si es himno
                textoPrincipal.classList.remove('versiculo-biblia');
                referencia.style.display = 'none';
                // Refuerzo: ocultar SIEMPRE antes de mostrar
                contadorSeccion.style.display = 'none';
                contadorSeccion.classList.remove('visible');
                indicadorEstrofa.style.display = 'none';
                indicadorEstrofa.classList.remove('visible');
                // Manejar indicadores de himno
                mostrarIndicadoresHimno(data.himnoData);
                // Aseguramos que el indicador de versículo se oculte si no corresponde
                if (!data.himnoData.verso) {
                    indicadorEstrofa.style.display = 'none';
                    indicadorEstrofa.classList.remove('visible');
                }
            } else {
                // Modo versículo normal
                contenido.classList.remove('modo-himno');
                contenido.classList.add('modo-versiculo');
                
                textoPrincipal.innerHTML = data.texto;
                referencia.textContent = data.ref;
                // Aplicar clase de versículo bíblico si es modo Biblia
                textoPrincipal.classList.add('versiculo-biblia');
                // Si no hay texto ni referencia, ocultar la barra
                if (!data.texto && !data.ref) {
                    referencia.style.display = 'none';
                } else {
                    referencia.style.display = '';
                }
                
                // Ocultar indicadores si no es himno
                contadorSeccion.style.display = 'none';
                indicadorEstrofa.style.display = 'none';
                

            }
        }
        
        // Mostrar título del himno en esquina superior izquierda si es himno
        if (data.himnoData && !data.himnoData.esTitulo) {
            // Crear o actualizar elemento para título del himno
            let tituloHimnoElement = document.getElementById('titulo-himno-proyector');
            if (!tituloHimnoElement) {
                tituloHimnoElement = document.createElement('div');
                tituloHimnoElement.id = 'titulo-himno-proyector';
                tituloHimnoElement.style.cssText = `
                    position: absolute;
                    top: 20px;
                    left: 20px;
                    font-size: 2.3vw;
                    font-weight: bold;
                    color: #fff;
                    text-shadow: 0 2px 8px #000;
                    z-index: 10;
                    max-width: 40%;
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                `;
                document.getElementById('contenido').appendChild(tituloHimnoElement);
            }
            tituloHimnoElement.textContent = `${data.himnoData.numero} - ${data.himnoData.titulo}`;
            tituloHimnoElement.style.display = 'block';
        } else {
            // Ocultar título del himno si no es himno o es título
            const tituloHimnoElement = document.getElementById('titulo-himno-proyector');
            if (tituloHimnoElement) {
                tituloHimnoElement.style.display = 'none';
            }
        }
        
        // Remover clases de fade-out para mostrar el nuevo texto
        textoPrincipal.classList.remove('fade-out');
        referencia.classList.remove('fade-out');
    }, 150); // La mitad del tiempo de transición CSS (300ms / 2)
});

socket.on('change_mode', (data) => {
    console.log('📥 Recibido change_mode:', data);
    if (data.videoSrc) {
        try {
            console.log('[VIDEO] Intentando cambiar video de fondo a:', data.videoSrc);
            console.log('[VIDEO] Estado actual del video:', {
                currentSrc: videoBg.currentSrc,
                readyState: videoBg.readyState,
                networkState: videoBg.networkState,
                paused: videoBg.paused,
                ended: videoBg.ended
            });
            
            // Pausar el video actual antes de cambiar
            if (!videoBg.paused) {
                videoBg.pause();
            }
            
            // Eliminar el <source> actual
            while (videoBg.firstChild) {
                console.log('[VIDEO] Eliminando source anterior:', videoBg.firstChild);
                videoBg.removeChild(videoBg.firstChild);
            }
            
            // Crear un nuevo <source> con el src y tipo adecuado
            const newSource = document.createElement('source');
            newSource.src = data.videoSrc;
            // Detectar tipo MIME por extensión
            if (data.videoSrc.endsWith('.mp4')) {
                newSource.type = 'video/mp4';
            } else if (data.videoSrc.endsWith('.mkv')) {
                newSource.type = 'video/x-matroska';
            } else {
                newSource.type = '';
            }
            console.log('[VIDEO] Nuevo source creado:', newSource);
            videoBg.appendChild(newSource);
            
            // Función para cargar y reproducir el video
            const loadAndPlayVideo = () => {
                console.log('[VIDEO] Llamando a videoBg.load()');
                videoBg.load();
                
                // Esperar a que el video esté listo antes de reproducir
                const playVideo = () => {
                    console.log('[VIDEO] Intentando reproducir video...');
                    console.log('[VIDEO] Estado antes de play:', {
                        readyState: videoBg.readyState,
                        networkState: videoBg.networkState,
                        paused: videoBg.paused
                    });
                    
                    videoBg.play().then(() => {
                        console.log('[VIDEO] ✅ Video reproducido exitosamente');
                    }).catch(e => {
                        console.log('[VIDEO] ❌ No se pudo hacer play automáticamente:', e);
                        // Intentar reproducir después de un delay
                        setTimeout(() => {
                            videoBg.play().catch(e2 => {
                                console.log('[VIDEO] ❌ Segundo intento falló:', e2);
                            });
                        }, 1000);
                    });
                };
                
                // Si el video ya está listo, reproducir inmediatamente
                if (videoBg.readyState >= 2) {
                    playVideo();
                } else {
                    // Esperar a que el video esté listo
                    videoBg.addEventListener('canplay', playVideo, { once: true });
                    videoBg.addEventListener('error', (e) => {
                        console.error('[VIDEO] ❌ Error al cargar video:', e);
                    }, { once: true });
                }
            };
            
            // Ejecutar la carga y reproducción
            loadAndPlayVideo();
            
            setTimeout(() => {
                console.log('[VIDEO] Estado final del video:', {
                    currentSrc: videoBg.currentSrc,
                    readyState: videoBg.readyState,
                    networkState: videoBg.networkState,
                    paused: videoBg.paused,
                    ended: videoBg.ended
                });
            }, 1000);
            
        } catch (err) {
            console.error('[VIDEO] Error al cambiar el video de fondo:', err);
        }
    } else {
        console.warn('[VIDEO] No se recibió data.videoSrc en change_mode');
    }
});

socket.on('config', (data) => {
    console.log('📥 Recibido config:', data);
    console.log('🔍 Tipo de data:', typeof data);
    console.log('🔍 Data.config existe:', !!data.config);
    console.log('🔍 Data completa:', JSON.stringify(data));
    
    // Verificar que los elementos existen antes de procesar
    if (!textoPrincipal) {
        console.error('❌ Elemento textoPrincipal no encontrado');
        return;
    }
    if (!referencia) {
        console.error('❌ Elemento referencia no encontrado');
        return;
    }
    
    if (data.config) {
        console.log('🔍 Configuración recibida:', data.config);
        
        // Aplicar tamaño de fuente al texto principal
        const fontSize = data.config.fontsize || 5;
        console.log('🔤 Aplicando tamaño de fuente:', fontSize + 'vw');
        
        // Estrategia 1: Usar CSS custom properties
        textoPrincipal.style.setProperty('--override-font-size', fontSize + 'vw');
        textoPrincipal.classList.add('override-font-size');
        
        const refFontSize = (fontSize * 0.7);
        referencia.style.setProperty('--override-ref-font-size', refFontSize + 'vw');
        referencia.classList.add('override-font-size');
        
        // Estrategia 2: También aplicar estilos inline como respaldo
        textoPrincipal.style.fontSize = fontSize + 'vw';
        referencia.style.fontSize = refFontSize + 'vw';
        
        console.log('🔤 Tamaño de fuente aplicado:', fontSize + 'vw');
        
        // Verificar que el estilo se aplicó
        const computedStyle = window.getComputedStyle(textoPrincipal);
        console.log('🔍 Tamaño de fuente computado:', computedStyle.fontSize);
        
        console.log('🔤 Tamaño de referencia aplicado:', refFontSize + 'vw');
        
        // Verificar que el estilo se aplicó
        const refComputedStyle = window.getComputedStyle(referencia);
        console.log('🔍 Tamaño de referencia computado:', refComputedStyle.fontSize);
        
    } else {
        console.warn('⚠️ No se recibió data.config en el mensaje config');
        console.log('🔍 Intentando procesar data directamente...');
        
        // Intentar procesar data directamente si no tiene la estructura esperada
        if (data.fontsize) {
            console.log('🔍 Procesando data directa con fontsize:', data.fontsize);
            const fontSize = data.fontsize;
            
            // Estrategia 1: Usar CSS custom properties
            textoPrincipal.style.setProperty('--override-font-size', fontSize + 'vw');
            textoPrincipal.classList.add('override-font-size');
            
            const refFontSize = (fontSize * 0.7);
            referencia.style.setProperty('--override-ref-font-size', refFontSize + 'vw');
            referencia.classList.add('override-font-size');
            
            // Estrategia 2: También aplicar estilos inline como respaldo
            textoPrincipal.style.fontSize = fontSize + 'vw';
            referencia.style.fontSize = refFontSize + 'vw';
            
            // Verificar inmediatamente después de aplicar
            setTimeout(() => {
                const computedPrincipal = window.getComputedStyle(textoPrincipal);
                const computedRef = window.getComputedStyle(referencia);
                console.log('🔍 Verificación de estilos aplicados:', {
                    fontSizeSolicitado: fontSize + 'vw',
                    fontSizeAplicado: computedPrincipal.fontSize,
                    refFontSizeSolicitado: refFontSize + 'vw',
                    refFontSizeAplicado: computedRef.fontSize,
                    styleInline: textoPrincipal.style.fontSize,
                    refStyleInline: referencia.style.fontSize,
                    customProperty: textoPrincipal.style.getPropertyValue('--override-font-size'),
                    refCustomProperty: referencia.style.getPropertyValue('--override-ref-font-size')
                });
            }, 100);
            
            console.log('✅ Estilos aplicados desde data directa');
        }
    }
});

socket.on('reproducirAudio', (data) => {
    console.log('📥 Recibido reproducirAudio:', data);
    reproducirAudioHimno(data.ruta, data.himno, data.titulo);
});

socket.on('detenerAudio', (data) => {
    console.log('📥 Recibido detenerAudio:', data);
    detenerAudioHimno(data.fadeout, data.duracion);
});

/**
 * Muestra los indicadores específicos para himnos
 * @param {Object} himnoData - Datos del himno { esTitulo, numero, titulo, verso, estrofaIndex, totalEstrofas, seccionActual, totalSecciones }
 */
function mostrarIndicadoresHimno(himnoData) {
    console.log('[DEBUG] mostrarIndicadoresHimno - himnoData:', himnoData);
    // Refuerzo: ocultar siempre el indicador en el título o en la sección 0
    if (himnoData.esTitulo || himnoData.estrofaIndex === 0 || himnoData.seccionActual === 0) {
        textoPrincipal.classList.add('titulo-himno');
        // Mostrar el mismo texto que en la lista (con '|')
        const numeroSinCeros = String(parseInt(himnoData.numero, 10));
        textoPrincipal.innerHTML = `${numeroSinCeros} | ${himnoData.titulo}`;
        // Ocultar indicadores SIEMPRE
        contadorSeccion.style.display = 'none';
        contadorSeccion.classList.remove('visible');
        indicadorEstrofa.style.display = 'none';
        indicadorEstrofa.classList.remove('visible');
        return; // Salir de la función para evitar mostrar el indicador
    }
    // Es una estrofa - mostrar indicadores solo si estrofaIndex >= 1
    textoPrincipal.classList.remove('titulo-himno');
    // Mostrar contador de sección
    if (himnoData.seccionActual !== undefined && himnoData.totalSecciones !== undefined) {
        contadorSeccion.textContent = `${himnoData.seccionActual}/${himnoData.totalSecciones}`;
        contadorSeccion.style.display = '';
        contadorSeccion.classList.add('visible');
    } else {
        contadorSeccion.style.display = 'none';
    }
    // Indicador de estrofa/verso/coro solo si estrofaIndex >= 1
    let versoText = '';
    const totalVerses = himnoData.verses ? parseInt(himnoData.verses, 10) : undefined;
    if (himnoData.estrofaIndex >= 1) {
        if (typeof himnoData.verse === 'string' && himnoData.verse.toLowerCase().startsWith('coro')) {
            // Si es "coro" o "coro x"
            let numCoro = 1;
            const match = himnoData.verse.match(/coro\s*(\d+)?/i);
            if (match && match[1]) {
                numCoro = parseInt(match[1], 10);
            }
            versoText = `Coro ${numCoro} de ${totalVerses}`;
        } else if (typeof himnoData.verse !== 'undefined' && totalVerses && himnoData.verse !== null && himnoData.verse !== '') {
            versoText = `Verso ${himnoData.verse} de ${totalVerses}`;
        } else {
            versoText = '';
        }
    }
    console.log('[DEBUG] versoText calculado:', versoText);
    if (versoText) {
        indicadorEstrofa.textContent = versoText;
        indicadorEstrofa.style.display = '';
        indicadorEstrofa.classList.add('visible');
        console.log('[DEBUG] Mostrando indicadorEstrofa:', versoText);
    } else {
        indicadorEstrofa.style.display = 'none';
        indicadorEstrofa.classList.remove('visible');
        console.log('[DEBUG] Ocultando indicadorEstrofa');
    }
}

/**
 * Reproduce el audio de un himno
 * @param {string} ruta - Ruta del archivo de audio
 * @param {string} himno - Número del himno
 * @param {string} titulo - Título del himno
 */
function reproducirAudioHimno(ruta, himno, titulo) {
    try {
        console.log('🎵 Reproduciendo audio:', { ruta, himno, titulo });
        
        // Crear elemento de audio si no existe
        if (!audioElement) {
            audioElement = new Audio();
            audioElement.preload = 'auto';
            
            // Eventos del audio
            audioElement.addEventListener('loadstart', () => {
                console.log('🔄 Cargando audio...');
            });
            
            audioElement.addEventListener('canplay', () => {
                console.log('✅ Audio listo para reproducir');
            });
            
            audioElement.addEventListener('play', () => {
                console.log('▶️ Audio reproduciéndose');
            });
            
            audioElement.addEventListener('error', (e) => {
                console.error('❌ Error al reproducir audio:', e);
                console.error('🔍 Detalles del error:', audioElement.error);
                console.error('🔍 Código de error:', audioElement.error ? audioElement.error.code : 'N/A');
                console.error('🔍 Mensaje de error:', audioElement.error ? audioElement.error.message : 'N/A');
                
                // Mostrar mensaje de error más detallado
                let errorMsg = 'Error al reproducir audio';
                if (audioElement.error) {
                    switch(audioElement.error.code) {
                        case 1:
                            errorMsg = 'Error: Archivo de audio no encontrado';
                            break;
                        case 2:
                            errorMsg = 'Error: Red no disponible';
                            break;
                        case 3:
                            errorMsg = 'Error: Formato de audio no soportado';
                            break;
                        case 4:
                            errorMsg = 'Error: Archivo de audio corrupto';
                            break;
                        default:
                            errorMsg = `Error: ${audioElement.error.message}`;
                    }
                }
                textoPrincipal.innerHTML = `${errorMsg}<br><small>${ruta}</small>`;
            });
            
            audioElement.addEventListener('ended', () => {
                console.log('⏹️ Audio terminado');
                // Notificar al panel de control que el audio terminó
                socket.emit('audioTerminado', {
                    himno: himnoActivo ? himnoActivo.numero : 'desconocido'
                });
            });
            
            audioElement.addEventListener('load', () => {
                console.log('📦 Audio cargado completamente');
            });
            
            audioElement.addEventListener('canplaythrough', () => {
                console.log('🎯 Audio puede reproducirse completamente');
            });
        }
        
        // Detener audio anterior si está reproduciéndose
        if (!audioElement.paused) {
            audioElement.pause();
            audioElement.currentTime = 0;
        }
        
        // Configurar y reproducir el nuevo audio
        audioElement.src = ruta;
        audioElement.volume = 1.0;
        
        // Verificar si el archivo existe antes de intentar reproducir
        fetch(ruta, { method: 'HEAD' })
            .then(response => {
                if (response.ok) {
                    console.log('✅ Archivo de audio encontrado, intentando reproducir...');
                    
                    // Función para intentar reproducir el audio
                    const attemptPlay = () => {
                        const playPromise = audioElement.play();
                        
                        if (playPromise !== undefined) {
                            playPromise
                                .then(() => {
                                    console.log('✅ Audio iniciado correctamente');
                                })
                                .catch(error => {
                                    console.error('❌ Error al iniciar audio:', error);
                                    console.error('🔍 Tipo de error:', error.name);
                                    console.error('🔍 Mensaje:', error.message);
                                    
                                    // Si el error es por permisos de audio, intentar habilitarlo
                                    if (error.name === 'NotAllowedError' || error.name === 'NotSupportedError') {
                                        console.log('🔄 Intentando habilitar contexto de audio...');
                                        
                                        // Intentar habilitar el contexto de audio
                                        if (window.enableAudioContext) {
                                            window.enableAudioContext()
                                                .then(() => {
                                                    console.log('✅ Contexto de audio habilitado, reintentando reproducción...');
                                                    // Reintentar reproducción después de un breve delay
                                                    setTimeout(() => {
                                                        attemptPlay();
                                                    }, 100);
                                                })
                                                .catch(enableError => {
                                                    console.error('❌ No se pudo habilitar el contexto de audio:', enableError);
                                                    textoPrincipal.innerHTML = `Error: Permisos de audio denegados.<br><small>Haga clic en la página para habilitar audio.</small><br><small>${ruta}</small>`;
                                                });
                                        } else {
                                            textoPrincipal.innerHTML = `Error: Permisos de audio denegados.<br><small>Haga clic en la página para habilitar audio.</small><br><small>${ruta}</small>`;
                                        }
                                    } else {
                                        // Mostrar mensaje de error específico
                                        let errorMsg = 'No se pudo reproducir el audio';
                                        if (error.name === 'NotAllowedError') {
                                            errorMsg = 'Error: Permisos de audio denegados. Haga clic en la página para habilitar audio.';
                                        } else if (error.name === 'NotSupportedError') {
                                            errorMsg = 'Error: Formato de audio no soportado';
                                        }
                                        
                                        textoPrincipal.innerHTML = `${errorMsg}<br><small>${ruta}</small>`;
                                    }
                                });
                        }
                    };
                    
                    // Intentar reproducir
                    attemptPlay();
                    
                } else {
                    console.error('❌ Archivo de audio no encontrado:', ruta);
                    textoPrincipal.innerHTML = `Error: Archivo de audio no encontrado<br><small>${ruta}</small>`;
                }
            })
            .catch(error => {
                console.error('❌ Error al verificar archivo de audio:', error);
                textoPrincipal.innerHTML = `Error: No se pudo acceder al archivo de audio<br><small>${ruta}</small>`;
            });
        
    } catch (error) {
        console.error('❌ Error en reproducirAudioHimno:', error);
        textoPrincipal.innerHTML = `Error: ${error.message}<br><small>${ruta}</small>`;
    }
}

/**
 * Detiene el audio de un himno con fadeout opcional
 * @param {boolean} fadeout - Si debe hacer fadeout antes de detener
 * @param {number} duracion - Duración del fadeout en milisegundos
 */
function detenerAudioHimno(fadeout = true, duracion = 2000) {
    try {
        console.log('⏹️ Deteniendo audio:', { fadeout, duracion });
        
        if (!audioElement) {
            console.log('ℹ️ No hay audio reproduciéndose');
            return;
        }
        
        if (audioElement.paused) {
            console.log('ℹ️ Audio ya está pausado');
            return;
        }
        
        if (fadeout) {
            // Hacer fadeout gradual
            console.log('🔉 Iniciando fadeout...');
            
            const volumenInicial = audioElement.volume;
            const pasos = 20; // Número de pasos para el fadeout
            const volumenPorPaso = volumenInicial / pasos;
            const intervalo = duracion / pasos;
            
            let pasoActual = 0;
            
            const fadeoutInterval = setInterval(() => {
                pasoActual++;
                const nuevoVolumen = Math.max(0, volumenInicial - (volumenPorPaso * pasoActual));
                
                audioElement.volume = nuevoVolumen;
                console.log(`🔉 Fadeout paso ${pasoActual}/${pasos}, volumen: ${nuevoVolumen.toFixed(2)}`);
                
                if (pasoActual >= pasos || nuevoVolumen <= 0) {
                    clearInterval(fadeoutInterval);
                    
                    // Detener completamente el audio
                    audioElement.pause();
                    audioElement.currentTime = 0;
                    audioElement.volume = 1.0; // Restaurar volumen para futuras reproducciones
                    
                    console.log('⏹️ Audio detenido completamente después del fadeout');
                    
                    // Notificar al panel de control que el audio terminó
                    socket.emit('audioTerminado', {
                        himno: 'detenido_por_usuario'
                    });
                }
            }, intervalo);
            
        } else {
            // Detener inmediatamente
            audioElement.pause();
            audioElement.currentTime = 0;
            console.log('⏹️ Audio detenido inmediatamente');
            
            // Notificar al panel de control que el audio terminó
            socket.emit('audioTerminado', {
                himno: 'detenido_por_usuario'
            });
        }
        
    } catch (error) {
        console.error('❌ Error en detenerAudioHimno:', error);
    }
}

// Función para enviar la relación de aspecto al panel de control
function enviarRelacionAspecto() {
    const width = window.innerWidth;
    const height = window.innerHeight;
    const aspect = width / height;
    socket.emit('aspect_ratio', { width, height, aspect });
    console.log('📤 Enviando relación de aspecto:', { width, height, aspect });
}

// Enviar al cargar
window.addEventListener('DOMContentLoaded', enviarRelacionAspecto);
// Enviar al cambiar tamaño
window.addEventListener('resize', enviarRelacionAspecto);

document.addEventListener('click', function() {
    socket.emit('proyectorClick');
});




// church_display/src\proyector.html
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Proyector</title>
    <link rel="stylesheet" href="/css/proyector.css">
    <script src="//cdnjs.cloudflare.com/ajax/libs/socket.io/4.6.1/socket.io.min.js"></script>
    <style>
        /* Estilos para el botón de habilitación de audio */
        #audio-enabler {
            position: fixed;
            top: -100px;
            left: -100px;
            width: 1px;
            height: 1px;
            opacity: 0;
            pointer-events: none;
            z-index: -1;
        }
        
        #audio-status {
            position: fixed;
            top: 10px;
            right: 10px;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 12px;
            z-index: 1000;
            display: none;
        }
        
        #audio-indicator {
            position: fixed;
            top: 20px;
            right: 20px;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background: #d32f2f; /* rojo por defecto */
            box-shadow: 0 0 12px 2px rgba(0,0,0,0.5);
            z-index: 9999;
            border: 3px solid #111;
            display: none;
            transition: background 0.3s, box-shadow 0.3s;
            cursor: pointer;
        }
        #audio-indicator.enabled {
            background: #43a047; /* verde */
            box-shadow: 0 0 16px 4px rgba(67,160,71,0.6);
        }
        #audio-indicator::after {
            content: attr(data-tooltip);
            position: absolute;
            top: 110%;
            right: 50%;
            transform: translateX(50%);
            background: #222;
            color: #fff;
            padding: 4px 10px;
            border-radius: 5px;
            font-size: 13px;
            white-space: nowrap;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.2s;
        }
        #audio-indicator:hover::after {
            opacity: 1;
        }
        
        /* Círculo rojo en esquina superior derecha */
        #circulo-indicador {
            position: fixed;
            top: 20px;
            right: 20px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #ff0000; /* rojo */
            box-shadow: 0 0 8px 2px rgba(255,0,0,0.4);
            z-index: 99999; /* z-index más alto posible */
            border: 1px solid #ffffff;
            transition: all 0.3s ease;
            display: block;
        }
        
        #circulo-indicador.verde {
            background: #00ff00; /* verde */
            box-shadow: 0 0 12px 3px rgba(0,255,0,0.6);
        }
        
        #circulo-indicador.oculto {
            opacity: 0;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <video autoplay muted loop id="video-bg">
        <source src="/src/assets/videos/verso-bg.mp4" type="video/mp4">
        <!-- El src se cambiará con JS -->
    </video>
    
    <!-- Botón invisible para habilitar audio -->
    <button id="audio-enabler" type="button">Habilitar Audio</button>
    
    <!-- Indicador de estado del audio -->
    <div id="audio-status">Audio: Deshabilitado</div>
    
    <!-- Indicador de audio -->
    <div id="audio-indicator" data-tooltip="Haz clic para habilitar el audio"></div>
    
    <!-- Círculo indicador en esquina superior derecha -->
    <div id="circulo-indicador"></div>
    
    <div id="contenido">
        <!-- Contador de sección (arriba a la derecha) -->
        <div id="contador-seccion"></div>
        
        <!-- Indicador de estrofa (centrado arriba) -->
        <div id="indicador-estrofa"></div>
        
        <p id="texto-principal"></p>
        <footer id="referencia"></footer>
    </div>
    
    <!-- Script para habilitar audio automáticamente -->
    <script>
        // Variable global para el estado del audio
        window.audioEnabled = false;
        const audioStatus = document.getElementById('audio-status');
        const audioEnabler = document.getElementById('audio-enabler');
        const audioIndicator = document.getElementById('audio-indicator');
        
        // Función para actualizar el indicador de estado
        function updateAudioStatus(enabled) {
            window.audioEnabled = enabled;
            audioStatus.textContent = `Audio: ${enabled ? 'Habilitado' : 'Deshabilitado'}`;
            audioStatus.style.display = 'block';
            audioStatus.style.background = enabled ? 'rgba(0,255,0,0.7)' : 'rgba(255,0,0,0.7)';
            
            // Ocultar el indicador después de 3 segundos si está habilitado
            if (enabled) {
                setTimeout(() => {
                    audioStatus.style.display = 'none';
                }, 3000);
            }
        }
        
        function showAudioIndicator(enabled) {
            if (enabled) {
                audioIndicator.classList.add('enabled');
                audioIndicator.setAttribute('data-tooltip', 'Audio habilitado');
                audioIndicator.style.display = 'block';
                setTimeout(() => {
                    audioIndicator.style.display = 'none';
                }, 2500);
            } else {
                audioIndicator.classList.remove('enabled');
                audioIndicator.setAttribute('data-tooltip', 'Haz clic para habilitar el audio');
                audioIndicator.style.display = 'block';
            }
        }
        
        // Función para habilitar el contexto de audio
        function enableAudioContext() {
            if (window.audioEnabled) return Promise.resolve();
            
            return new Promise((resolve, reject) => {
                try {
                    // Estrategia 1: Crear un audio temporal y reproducirlo
                    const tempAudio = new Audio();
                    tempAudio.volume = 0;
                    
                    // Estrategia 2: Usar Web Audio API si está disponible
                    let audioContext = null;
                    if (window.AudioContext || window.webkitAudioContext) {
                        try {
                            audioContext = new (window.AudioContext || window.webkitAudioContext)();
                        } catch (e) {
                            console.log('Web Audio API no disponible:', e);
                        }
                    }
                    
                    // Intentar reproducir el audio temporal
                    const playPromise = tempAudio.play();
                    
                    if (playPromise !== undefined) {
                        playPromise
                            .then(() => {
                                console.log('✅ Audio habilitado exitosamente');
                                updateAudioStatus(true);
                                showAudioIndicator(true);
                                
                                // Si tenemos AudioContext, también lo resumimos
                                if (audioContext && audioContext.state === 'suspended') {
                                    audioContext.resume();
                                }
                                
                                resolve();
                            })
                            .catch(error => {
                                console.log('⚠️ No se pudo habilitar audio automáticamente:', error);
                                
                                // Estrategia 3: Intentar con AudioContext
                                if (audioContext && audioContext.state === 'suspended') {
                                    audioContext.resume().then(() => {
                                        console.log('✅ Audio habilitado via AudioContext');
                                        updateAudioStatus(true);
                                        showAudioIndicator(true);
                                        resolve();
                                    }).catch(reject);
                                } else {
                                    updateAudioStatus(false);
                                    showAudioIndicator(false);
                                    reject(error);
                                }
                            });
                    } else {
                        // Fallback para navegadores más antiguos
                        console.log('ℹ️ Navegador no soporta play() promise');
                        updateAudioStatus(true);
                        showAudioIndicator(true);
                        resolve();
                    }
                } catch (error) {
                    console.error('❌ Error al habilitar audio:', error);
                    updateAudioStatus(false);
                    showAudioIndicator(false);
                    reject(error);
                }
            });
        }
        
        // Habilitar audio al cargar la página
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Intentando habilitar audio automáticamente...');
            
            // Intentar habilitar audio inmediatamente
            enableAudioContext().catch(() => {
                console.log('ℹ️ Audio no se pudo habilitar automáticamente');
            });
            
            // También intentar cuando el usuario interactúe con la página
            const enableOnInteraction = () => {
                enableAudioContext().then(() => {
                    // Remover los event listeners una vez que el audio esté habilitado
                    document.removeEventListener('click', enableOnInteraction);
                    document.removeEventListener('keydown', enableOnInteraction);
                    document.removeEventListener('touchstart', enableOnInteraction);
                }).catch(() => {
                    // Si falla, mantener los listeners activos
                });
            };
            
            document.addEventListener('click', enableOnInteraction);
            document.addEventListener('keydown', enableOnInteraction);
            document.addEventListener('touchstart', enableOnInteraction);
        });
        
        // Habilitar audio al hacer clic en cualquier parte de la página
        document.addEventListener('click', function() {
            if (!window.audioEnabled) {
                enableAudioContext().catch(() => {
                    console.log('ℹ️ Audio ya habilitado o no disponible');
                });
            }
        }, { once: false });
        
        // Exponer la función globalmente para que pueda ser usada desde proyector.js
        window.enableAudioContext = enableAudioContext;
    </script>
    
    <!-- Script para el círculo indicador -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const circuloIndicador = document.getElementById('circulo-indicador');
            
            // Función para manejar el clic en cualquier parte de la pantalla
            function manejarClicPantalla() {
                // Cambiar a verde
                circuloIndicador.classList.add('verde');
                
                // Eliminar el elemento del DOM después de 3 segundos
                setTimeout(() => {
                    circuloIndicador.remove();
                }, 3000);
            }
            
            // Agregar event listener para el clic en cualquier parte de la pantalla
            document.addEventListener('click', manejarClicPantalla);
        });
    </script>
    
    <script src="/src/js/proyector.js"></script>
    
    <!-- Script de prueba de configuración -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Eliminar botones de prueba
        });
    </script>
</body>
</html>



